
ReadTime__WriteSong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004540  2000007c  08006d00  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045bc  08006d00  000245bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b903  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bf  00000000  00000000  0003b9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b6a  00000000  00000000  00041b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bb8  00000000  00000000  00066692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc402  00000000  00000000  0008024a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c64c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  0015c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005dfc 	.word	0x08005dfc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08005dfc 	.word	0x08005dfc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <pushTime>:
 *      Author: Miguel Murillo
 */

#include "DS3231.h"

void pushTime (struct TIME *time_ptr){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	6078      	str	r0, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(time_ptr->seconds);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f891 	bl	80006dc <decToBcd>
 80005ba:	4603      	mov	r3, r0
 80005bc:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(time_ptr->minutes);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	785b      	ldrb	r3, [r3, #1]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f88a 	bl	80006dc <decToBcd>
 80005c8:	4603      	mov	r3, r0
 80005ca:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(time_ptr->hour);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f883 	bl	80006dc <decToBcd>
 80005d6:	4603      	mov	r3, r0
 80005d8:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(time_ptr->day);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	78db      	ldrb	r3, [r3, #3]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f87c 	bl	80006dc <decToBcd>
 80005e4:	4603      	mov	r3, r0
 80005e6:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(time_ptr->numWeek);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f875 	bl	80006dc <decToBcd>
 80005f2:	4603      	mov	r3, r0
 80005f4:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(time_ptr->numMonth);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f86e 	bl	80006dc <decToBcd>
 8000600:	4603      	mov	r3, r0
 8000602:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(time_ptr->year);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	799b      	ldrb	r3, [r3, #6]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f867 	bl	80006dc <decToBcd>
 800060e:	4603      	mov	r3, r0
 8000610:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_I2C_ADDR, 0x00, 1, set_time, 7, 1000);
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2307      	movs	r3, #7
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	2200      	movs	r2, #0
 8000626:	21d0      	movs	r1, #208	; 0xd0
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <pushTime+0x90>)
 800062a:	f001 fc0b 	bl	8001e44 <HAL_I2C_Mem_Write>
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20004460 	.word	0x20004460

0800063c <pullTime>:

void pullTime(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_I2C_ADDR, 0x00, 1, get_time, 7, 1000);
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	2307      	movs	r3, #7
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	463b      	mov	r3, r7
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	2200      	movs	r2, #0
 8000654:	21d0      	movs	r1, #208	; 0xd0
 8000656:	481f      	ldr	r0, [pc, #124]	; (80006d4 <pullTime+0x98>)
 8000658:	f001 fcee 	bl	8002038 <HAL_I2C_Mem_Read>
	pull.seconds = bcdToDec(get_time[0]);
 800065c:	783b      	ldrb	r3, [r7, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f862 	bl	8000728 <bcdToDec>
 8000664:	4603      	mov	r3, r0
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <pullTime+0x9c>)
 800066a:	701a      	strb	r2, [r3, #0]
	pull.minutes = bcdToDec(get_time[1]);
 800066c:	787b      	ldrb	r3, [r7, #1]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f85a 	bl	8000728 <bcdToDec>
 8000674:	4603      	mov	r3, r0
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <pullTime+0x9c>)
 800067a:	705a      	strb	r2, [r3, #1]
	pull.hour = bcdToDec(get_time[2]);
 800067c:	78bb      	ldrb	r3, [r7, #2]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f852 	bl	8000728 <bcdToDec>
 8000684:	4603      	mov	r3, r0
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <pullTime+0x9c>)
 800068a:	709a      	strb	r2, [r3, #2]
	pull.day = bcdToDec(get_time[3]);
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f84a 	bl	8000728 <bcdToDec>
 8000694:	4603      	mov	r3, r0
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <pullTime+0x9c>)
 800069a:	70da      	strb	r2, [r3, #3]
	pull.numWeek = bcdToDec(get_time[4]);
 800069c:	793b      	ldrb	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f842 	bl	8000728 <bcdToDec>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <pullTime+0x9c>)
 80006aa:	711a      	strb	r2, [r3, #4]
	pull.numMonth = bcdToDec(get_time[5]);
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f83a 	bl	8000728 <bcdToDec>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <pullTime+0x9c>)
 80006ba:	715a      	strb	r2, [r3, #5]
	pull.year = bcdToDec(get_time[6]);
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f832 	bl	8000728 <bcdToDec>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <pullTime+0x9c>)
 80006ca:	719a      	strb	r2, [r3, #6]
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20004460 	.word	0x20004460
 80006d8:	20004458 	.word	0x20004458

080006dc <decToBcd>:
uint8_t decToBcd(int val){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10));
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <decToBcd+0x48>)
 80006e8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ec:	1092      	asrs	r2, r2, #2
 80006ee:	17db      	asrs	r3, r3, #31
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	b2d8      	uxtb	r0, r3
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <decToBcd+0x48>)
 80006fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000700:	1099      	asrs	r1, r3, #2
 8000702:	17d3      	asrs	r3, r2, #31
 8000704:	1ac9      	subs	r1, r1, r3
 8000706:	460b      	mov	r3, r1
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	440b      	add	r3, r1
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	1ad1      	subs	r1, r2, r3
 8000710:	b2cb      	uxtb	r3, r1
 8000712:	4403      	add	r3, r0
 8000714:	b2db      	uxtb	r3, r3
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	66666667 	.word	0x66666667

08000728 <bcdToDec>:
int bcdToDec(uint8_t val){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10) + (val%16));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	091b      	lsrs	r3, r3, #4
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	461a      	mov	r2, r3
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	4413      	add	r3, r2
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <vApplicationGetIdleTaskMemory+0x2c>)
 8000768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <vApplicationGetIdleTaskMemory+0x30>)
 800076e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000098 	.word	0x20000098
 8000788:	200000ec 	.word	0x200000ec

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b09c      	sub	sp, #112	; 0x70
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 ff03 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f88f 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 f981 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800079e:	f000 f955 	bl	8000a4c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80007a2:	f000 f929 	bl	80009f8 <MX_UART4_Init>
  MX_I2C1_Init();
 80007a6:	f000 f8f9 	bl	800099c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (ssd1306_Init(&hi2c1) != 0) {
 80007aa:	4839      	ldr	r0, [pc, #228]	; (8000890 <main+0x104>)
 80007ac:	f000 fa86 	bl	8000cbc <ssd1306_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <main+0x2e>
    Error_Handler();
 80007b6:	f000 fa65 	bl	8000c84 <Error_Handler>
  }
  ssd1306_Fill(Black);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fb9e 	bl	8000efc <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 80007c0:	4833      	ldr	r0, [pc, #204]	; (8000890 <main+0x104>)
 80007c2:	f000 fbbf 	bl	8000f44 <ssd1306_UpdateScreen>
  push.seconds = 0 ;
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <main+0x108>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
  push.minutes = 25;
 80007cc:	4b31      	ldr	r3, [pc, #196]	; (8000894 <main+0x108>)
 80007ce:	2219      	movs	r2, #25
 80007d0:	705a      	strb	r2, [r3, #1]
  push.hour = 17;
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <main+0x108>)
 80007d4:	2211      	movs	r2, #17
 80007d6:	709a      	strb	r2, [r3, #2]
  push.day = 3;
 80007d8:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <main+0x108>)
 80007da:	2203      	movs	r2, #3
 80007dc:	70da      	strb	r2, [r3, #3]
  push.numWeek = 8;
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <main+0x108>)
 80007e0:	2208      	movs	r2, #8
 80007e2:	711a      	strb	r2, [r3, #4]
  push.numMonth = 9;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <main+0x108>)
 80007e6:	2209      	movs	r2, #9
 80007e8:	715a      	strb	r2, [r3, #5]
  push.year = 21;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <main+0x108>)
 80007ec:	2215      	movs	r2, #21
 80007ee:	719a      	strb	r2, [r3, #6]
  pushTime(&push);
 80007f0:	4828      	ldr	r0, [pc, #160]	; (8000894 <main+0x108>)
 80007f2:	f7ff fed9 	bl	80005a8 <pushTime>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readTime */
  osThreadDef(readTime, StartReadTime, osPriorityBelowNormal, 0, 128);
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <main+0x10c>)
 80007f8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007fc:	461d      	mov	r5, r3
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTimeHandle = osThreadCreate(osThread(readTime), NULL);
 800080a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fc62 	bl	80040da <osThreadCreate>
 8000816:	4603      	mov	r3, r0
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <main+0x110>)
 800081a:	6013      	str	r3, [r2, #0]

  /* definition and creation of songTask */
  osThreadDef(songTask, StartSongTask, osPriorityIdle, 0, 128);
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <main+0x114>)
 800081e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000822:	461d      	mov	r5, r3
 8000824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800082c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  songTaskHandle = osThreadCreate(osThread(songTask), NULL);
 8000830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fc4f 	bl	80040da <osThreadCreate>
 800083c:	4603      	mov	r3, r0
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <main+0x118>)
 8000840:	6013      	str	r3, [r2, #0]

  /* definition and creation of counter */
  osThreadDef(counter, Startcounter, osPriorityIdle, 0, 128);
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <main+0x11c>)
 8000844:	f107 041c 	add.w	r4, r7, #28
 8000848:	461d      	mov	r5, r3
 800084a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  counterHandle = osThreadCreate(osThread(counter), NULL);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f003 fc3c 	bl	80040da <osThreadCreate>
 8000862:	4603      	mov	r3, r0
 8000864:	4a11      	ldr	r2, [pc, #68]	; (80008ac <main+0x120>)
 8000866:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(writeOLED, StartWriteOLED, osPriorityHigh, 0, 128);
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <main+0x124>)
 800086a:	463c      	mov	r4, r7
 800086c:	461d      	mov	r5, r3
 800086e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  writeOLEDHandle = osThreadCreate(osThread(writeOLED), NULL);
 800087a:	463b      	mov	r3, r7
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fc2b 	bl	80040da <osThreadCreate>
 8000884:	4603      	mov	r3, r0
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <main+0x128>)
 8000888:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800088a:	f003 fc1f 	bl	80040cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088e:	e7fe      	b.n	800088e <main+0x102>
 8000890:	20004460 	.word	0x20004460
 8000894:	200044b4 	.word	0x200044b4
 8000898:	08005e40 	.word	0x08005e40
 800089c:	2000450c 	.word	0x2000450c
 80008a0:	08005e5c 	.word	0x08005e5c
 80008a4:	20004518 	.word	0x20004518
 80008a8:	08005e78 	.word	0x08005e78
 80008ac:	20004510 	.word	0x20004510
 80008b0:	08005e94 	.word	0x08005e94
 80008b4:	20004514 	.word	0x20004514

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f004 fe70 	bl	80055ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <SystemClock_Config+0xdc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <SystemClock_Config+0xdc>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xdc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <SystemClock_Config+0xe0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a25      	ldr	r2, [pc, #148]	; (8000998 <SystemClock_Config+0xe0>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SystemClock_Config+0xe0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000920:	2302      	movs	r3, #2
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000928:	2308      	movs	r3, #8
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800092c:	23b4      	movs	r3, #180	; 0xb4
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fc49 	bl	80031d8 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800094c:	f000 f99a 	bl	8000c84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000950:	f002 f8f4 	bl	8002b3c <HAL_PWREx_EnableOverDrive>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800095a:	f000 f993 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2302      	movs	r3, #2
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	2105      	movs	r1, #5
 800097c:	4618      	mov	r0, r3
 800097e:	f002 f92d 	bl	8002bdc <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000988:	f000 f97c 	bl	8000c84 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3750      	adds	r7, #80	; 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x50>)
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <MX_I2C1_Init+0x54>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x50>)
 80009a8:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_I2C1_Init+0x58>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_I2C1_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_I2C1_Init+0x50>)
 80009ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_I2C1_Init+0x50>)
 80009da:	f001 f8ef 	bl	8001bbc <HAL_I2C_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e4:	f000 f94e 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20004460 	.word	0x20004460
 80009f0:	40005400 	.word	0x40005400
 80009f4:	000186a0 	.word	0x000186a0

080009f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_UART4_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_UART4_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_UART4_Init+0x4c>)
 8000a30:	f003 f91e 	bl	8003c70 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f923 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200044c8 	.word	0x200044c8
 8000a48:	40004c00 	.word	0x40004c00

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f003 f8f4 	bl	8003c70 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f8f9 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000451c 	.word	0x2000451c
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b2c:	f001 f812 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b48:	f000 fe70 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b64:	f000 fe62 	bl	800182c <HAL_GPIO_Init>

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <StartWriteOLED>:

/* USER CODE BEGIN 4 */
void StartWriteOLED(void const * argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	6078      	str	r0, [r7, #4]
	char str[15];
	for(;;){
		pullTime();
 8000b84:	f7ff fd5a 	bl	800063c <pullTime>
		/*ssd1306_SetCursor(5, 0);
		ssd1306_WriteString("COUNTER", Font_11x18, White);*/
		ssd1306_SetCursor(15, 36);
 8000b88:	2124      	movs	r1, #36	; 0x24
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f000 fb12 	bl	80011b4 <ssd1306_SetCursor>
		sprintf(str,"%d",counter);
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <StartWriteOLED+0x78>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4917      	ldr	r1, [pc, #92]	; (8000bf8 <StartWriteOLED+0x7c>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 fd0d 	bl	80055bc <siprintf>
		ssd1306_WriteString(str, Font_11x18, White);
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <StartWriteOLED+0x80>)
 8000ba4:	f107 0008 	add.w	r0, r7, #8
 8000ba8:	2301      	movs	r3, #1
 8000baa:	ca06      	ldmia	r2, {r1, r2}
 8000bac:	f000 fadc 	bl	8001168 <ssd1306_WriteString>
		ssd1306_SetCursor(20, 5);
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	2014      	movs	r0, #20
 8000bb4:	f000 fafe 	bl	80011b4 <ssd1306_SetCursor>
		sprintf(str,"%02d:%02d:%02d:",pull.hour,pull.minutes,pull.seconds);
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <StartWriteOLED+0x84>)
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <StartWriteOLED+0x84>)
 8000bc0:	785b      	ldrb	r3, [r3, #1]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <StartWriteOLED+0x84>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f107 0008 	add.w	r0, r7, #8
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <StartWriteOLED+0x88>)
 8000bd2:	f004 fcf3 	bl	80055bc <siprintf>
		ssd1306_WriteString(str, Font_11x18, White);
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <StartWriteOLED+0x80>)
 8000bd8:	f107 0008 	add.w	r0, r7, #8
 8000bdc:	2301      	movs	r3, #1
 8000bde:	ca06      	ldmia	r2, {r1, r2}
 8000be0:	f000 fac2 	bl	8001168 <ssd1306_WriteString>
		ssd1306_UpdateScreen(&hi2c1);
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <StartWriteOLED+0x8c>)
 8000be6:	f000 f9ad 	bl	8000f44 <ssd1306_UpdateScreen>
		osDelay(500);
 8000bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bee:	f003 fac0 	bl	8004172 <osDelay>
		pullTime();
 8000bf2:	e7c7      	b.n	8000b84 <StartWriteOLED+0x8>
 8000bf4:	200002ec 	.word	0x200002ec
 8000bf8:	08005eb0 	.word	0x08005eb0
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20004458 	.word	0x20004458
 8000c04:	08005eb4 	.word	0x08005eb4
 8000c08:	20004460 	.word	0x20004460

08000c0c <StartReadTime>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadTime */
void StartReadTime(void const * argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f003 faac 	bl	8004172 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartReadTime+0x8>

08000c1c <StartSongTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSongTask */
void StartSongTask(void const * argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSongTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c24:	2120      	movs	r1, #32
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <StartSongTask+0x1c>)
 8000c28:	f000 ffad 	bl	8001b86 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c30:	f003 fa9f 	bl	8004172 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c34:	e7f6      	b.n	8000c24 <StartSongTask+0x8>
 8000c36:	bf00      	nop
 8000c38:	40020000 	.word	0x40020000

08000c3c <Startcounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startcounter */
void Startcounter(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startcounter */
  /* Infinite loop */
  for(;;)
  {
	counter++;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <Startcounter+0x20>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <Startcounter+0x20>)
 8000c4e:	801a      	strh	r2, [r3, #0]
    osDelay(500);
 8000c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c54:	f003 fa8d 	bl	8004172 <osDelay>
	counter++;
 8000c58:	e7f4      	b.n	8000c44 <Startcounter+0x8>
 8000c5a:	bf00      	nop
 8000c5c:	200002ec 	.word	0x200002ec

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 fcb5 	bl	80015e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010000 	.word	0x40010000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>

08000c8e <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af04      	add	r7, sp, #16
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8000c9a:	230a      	movs	r3, #10
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	1cfb      	adds	r3, r7, #3
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2178      	movs	r1, #120	; 0x78
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f001 f8c9 	bl	8001e44 <HAL_I2C_Mem_Write>
 8000cb2:	4603      	mov	r3, r0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8000cc4:	2064      	movs	r0, #100	; 0x64
 8000cc6:	f000 fcab 	bl	8001620 <HAL_Delay>
    int status = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8000cce:	21ae      	movs	r1, #174	; 0xae
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffdc 	bl	8000c8e <ssd1306_WriteCommand>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffd3 	bl	8000c8e <ssd1306_WriteCommand>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ffca 	bl	8000c8e <ssd1306_WriteCommand>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000d04:	21b0      	movs	r1, #176	; 0xb0
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffc1 	bl	8000c8e <ssd1306_WriteCommand>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8000d16:	21c8      	movs	r1, #200	; 0xc8
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ffb8 	bl	8000c8e <ssd1306_WriteCommand>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4413      	add	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8000d28:	2100      	movs	r1, #0
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffaf 	bl	8000c8e <ssd1306_WriteCommand>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffa6 	bl	8000c8e <ssd1306_WriteCommand>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff9d 	bl	8000c8e <ssd1306_WriteCommand>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8000d5e:	2181      	movs	r1, #129	; 0x81
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff94 	bl	8000c8e <ssd1306_WriteCommand>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8000d70:	21ff      	movs	r1, #255	; 0xff
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff8b 	bl	8000c8e <ssd1306_WriteCommand>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8000d82:	21a1      	movs	r1, #161	; 0xa1
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff82 	bl	8000c8e <ssd1306_WriteCommand>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8000d94:	21a6      	movs	r1, #166	; 0xa6
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff79 	bl	8000c8e <ssd1306_WriteCommand>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8000da6:	21a8      	movs	r1, #168	; 0xa8
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff70 	bl	8000c8e <ssd1306_WriteCommand>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8000db8:	213f      	movs	r1, #63	; 0x3f
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff67 	bl	8000c8e <ssd1306_WriteCommand>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dca:	21a4      	movs	r1, #164	; 0xa4
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff5e 	bl	8000c8e <ssd1306_WriteCommand>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8000ddc:	21d3      	movs	r1, #211	; 0xd3
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ff55 	bl	8000c8e <ssd1306_WriteCommand>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8000dee:	2100      	movs	r1, #0
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff4c 	bl	8000c8e <ssd1306_WriteCommand>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8000e00:	21d5      	movs	r1, #213	; 0xd5
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff43 	bl	8000c8e <ssd1306_WriteCommand>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8000e12:	21f0      	movs	r1, #240	; 0xf0
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff3a 	bl	8000c8e <ssd1306_WriteCommand>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8000e24:	21d9      	movs	r1, #217	; 0xd9
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff31 	bl	8000c8e <ssd1306_WriteCommand>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8000e36:	2122      	movs	r1, #34	; 0x22
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff28 	bl	8000c8e <ssd1306_WriteCommand>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4413      	add	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8000e48:	21da      	movs	r1, #218	; 0xda
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff1f 	bl	8000c8e <ssd1306_WriteCommand>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8000e5a:	2112      	movs	r1, #18
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff16 	bl	8000c8e <ssd1306_WriteCommand>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4413      	add	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8000e6c:	21db      	movs	r1, #219	; 0xdb
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff0d 	bl	8000c8e <ssd1306_WriteCommand>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8000e7e:	2120      	movs	r1, #32
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff04 	bl	8000c8e <ssd1306_WriteCommand>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8000e90:	218d      	movs	r1, #141	; 0x8d
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fefb 	bl	8000c8e <ssd1306_WriteCommand>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8000ea2:	2114      	movs	r1, #20
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fef2 	bl	8000c8e <ssd1306_WriteCommand>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8000eb4:	21af      	movs	r1, #175	; 0xaf
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fee9 	bl	8000c8e <ssd1306_WriteCommand>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <ssd1306_Init+0x214>
        return 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e00f      	b.n	8000ef0 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f813 	bl	8000efc <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f834 	bl	8000f44 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <ssd1306_Init+0x23c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <ssd1306_Init+0x23c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <ssd1306_Init+0x23c>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]

    return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200006f0 	.word	0x200006f0

08000efc <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e00d      	b.n	8000f28 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <ssd1306_Fill+0x1a>
 8000f12:	2100      	movs	r1, #0
 8000f14:	e000      	b.n	8000f18 <ssd1306_Fill+0x1c>
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <ssd1306_Fill+0x44>)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	460a      	mov	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2e:	d3ed      	bcc.n	8000f0c <ssd1306_Fill+0x10>
    }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200002f0 	.word	0x200002f0

08000f44 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e020      	b.n	8000f94 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	3b50      	subs	r3, #80	; 0x50
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fe97 	bl	8000c8e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8000f60:	2100      	movs	r1, #0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fe93 	bl	8000c8e <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8000f68:	2110      	movs	r1, #16
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fe8f 	bl	8000c8e <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	01db      	lsls	r3, r3, #7
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <ssd1306_UpdateScreen+0x60>)
 8000f76:	4413      	add	r3, r2
 8000f78:	2264      	movs	r2, #100	; 0x64
 8000f7a:	9202      	str	r2, [sp, #8]
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	9201      	str	r2, [sp, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	2240      	movs	r2, #64	; 0x40
 8000f86:	2178      	movs	r1, #120	; 0x78
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 ff5b 	bl	8001e44 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3301      	adds	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d9db      	bls.n	8000f52 <ssd1306_UpdateScreen+0xe>
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200002f0 	.word	0x200002f0

08000fa8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	71bb      	strb	r3, [r7, #6]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db48      	blt.n	8001054 <ssd1306_DrawPixel+0xac>
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8000fc6:	d845      	bhi.n	8001054 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <ssd1306_DrawPixel+0xb8>)
 8000fca:	791b      	ldrb	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000fd0:	797b      	ldrb	r3, [r7, #5]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2301      	moveq	r3, #1
 8000fd8:	2300      	movne	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d11a      	bne.n	800101a <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	b2d8      	uxtb	r0, r3
 8000fec:	4603      	mov	r3, r0
 8000fee:	01db      	lsls	r3, r3, #7
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <ssd1306_DrawPixel+0xbc>)
 8000ff4:	5cd3      	ldrb	r3, [r2, r3]
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	b25b      	sxtb	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b259      	sxtb	r1, r3
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	4603      	mov	r3, r0
 800100e:	01db      	lsls	r3, r3, #7
 8001010:	4413      	add	r3, r2
 8001012:	b2c9      	uxtb	r1, r1
 8001014:	4a13      	ldr	r2, [pc, #76]	; (8001064 <ssd1306_DrawPixel+0xbc>)
 8001016:	54d1      	strb	r1, [r2, r3]
 8001018:	e01d      	b.n	8001056 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	08db      	lsrs	r3, r3, #3
 8001020:	b2d8      	uxtb	r0, r3
 8001022:	4603      	mov	r3, r0
 8001024:	01db      	lsls	r3, r3, #7
 8001026:	4413      	add	r3, r2
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <ssd1306_DrawPixel+0xbc>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	b25a      	sxtb	r2, r3
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4013      	ands	r3, r2
 8001042:	b259      	sxtb	r1, r3
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	4603      	mov	r3, r0
 8001048:	01db      	lsls	r3, r3, #7
 800104a:	4413      	add	r3, r2
 800104c:	b2c9      	uxtb	r1, r1
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <ssd1306_DrawPixel+0xbc>)
 8001050:	54d1      	strb	r1, [r2, r3]
 8001052:	e000      	b.n	8001056 <ssd1306_DrawPixel+0xae>
        return;
 8001054:	bf00      	nop
    }
}
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200006f0 	.word	0x200006f0
 8001064:	200002f0 	.word	0x200002f0

08001068 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	4604      	mov	r4, r0
 8001070:	1d38      	adds	r0, r7, #4
 8001072:	e880 0006 	stmia.w	r0, {r1, r2}
 8001076:	461a      	mov	r2, r3
 8001078:	4623      	mov	r3, r4
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	4613      	mov	r3, r2
 800107e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <ssd1306_WriteChar+0xfc>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	793b      	ldrb	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	2b7f      	cmp	r3, #127	; 0x7f
 800108c:	dc06      	bgt.n	800109c <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <ssd1306_WriteChar+0xfc>)
 8001090:	885b      	ldrh	r3, [r3, #2]
 8001092:	461a      	mov	r2, r3
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001098:	2b3f      	cmp	r3, #63	; 0x3f
 800109a:	dd01      	ble.n	80010a0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e05d      	b.n	800115c <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e04c      	b.n	8001140 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3b20      	subs	r3, #32
 80010ac:	7979      	ldrb	r1, [r7, #5]
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	440b      	add	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e034      	b.n	8001130 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d012      	beq.n	80010fc <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <ssd1306_WriteChar+0xfc>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4413      	add	r3, r2
 80010e2:	b2d8      	uxtb	r0, r3
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <ssd1306_WriteChar+0xfc>)
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4413      	add	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	7bba      	ldrb	r2, [r7, #14]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff ff57 	bl	8000fa8 <ssd1306_DrawPixel>
 80010fa:	e016      	b.n	800112a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <ssd1306_WriteChar+0xfc>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4413      	add	r3, r2
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <ssd1306_WriteChar+0xfc>)
 800110c:	885b      	ldrh	r3, [r3, #2]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b2d9      	uxtb	r1, r3
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	f7ff ff3f 	bl	8000fa8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	461a      	mov	r2, r3
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	4293      	cmp	r3, r2
 8001138:	d3c5      	bcc.n	80010c6 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	797b      	ldrb	r3, [r7, #5]
 8001142:	461a      	mov	r2, r3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	4293      	cmp	r3, r2
 8001148:	d3ad      	bcc.n	80010a6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <ssd1306_WriteChar+0xfc>)
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4413      	add	r3, r2
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <ssd1306_WriteChar+0xfc>)
 8001158:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3724      	adds	r7, #36	; 0x24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	200006f0 	.word	0x200006f0

08001168 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	1d38      	adds	r0, r7, #4
 8001172:	e880 0006 	stmia.w	r0, {r1, r2}
 8001176:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001178:	e012      	b.n	80011a0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	7818      	ldrb	r0, [r3, #0]
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	1d3a      	adds	r2, r7, #4
 8001182:	ca06      	ldmia	r2, {r1, r2}
 8001184:	f7ff ff70 	bl	8001068 <ssd1306_WriteChar>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d002      	beq.n	800119a <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	e008      	b.n	80011ac <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
    while (*str)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e8      	bne.n	800117a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <ssd1306_SetCursor+0x2c>)
 80011ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <ssd1306_SetCursor+0x2c>)
 80011d2:	805a      	strh	r2, [r3, #2]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	200006f0 	.word	0x200006f0

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_MspInit+0x54>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_MspInit+0x54>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x54>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_MspInit+0x54>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_MspInit+0x54>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_MspInit+0x54>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	210f      	movs	r1, #15
 8001226:	f06f 0001 	mvn.w	r0, #1
 800122a:	f000 fad5 	bl	80017d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <HAL_I2C_MspInit+0x84>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12b      	bne.n	80012b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_I2C_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_I2C_MspInit+0x88>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_I2C_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127a:	23c0      	movs	r3, #192	; 0xc0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127e:	2312      	movs	r3, #18
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001282:	2301      	movs	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128a:	2304      	movs	r3, #4
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <HAL_I2C_MspInit+0x8c>)
 8001296:	f000 fac9 	bl	800182c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_I2C_MspInit+0x88>)
 80012a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_I2C_MspInit+0x88>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	; 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40005400 	.word	0x40005400
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	; 0x30
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_UART_MspInit+0xe8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12c      	bne.n	8001348 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <HAL_UART_MspInit+0xec>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_UART_MspInit+0xec>)
 80012f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012fc:	6413      	str	r3, [r2, #64]	; 0x40
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_UART_MspInit+0xec>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001326:	2303      	movs	r3, #3
 8001328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001336:	2308      	movs	r3, #8
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	481e      	ldr	r0, [pc, #120]	; (80013bc <HAL_UART_MspInit+0xf0>)
 8001342:	f000 fa73 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001346:	e030      	b.n	80013aa <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_UART_MspInit+0xf4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0xec>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_UART_MspInit+0xec>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800138a:	230c      	movs	r3, #12
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139a:	2307      	movs	r3, #7
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_UART_MspInit+0xf0>)
 80013a6:	f000 fa41 	bl	800182c <HAL_GPIO_Init>
}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40004c00 	.word	0x40004c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40004400 	.word	0x40004400

080013c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	2019      	movs	r0, #25
 80013da:	f000 f9fd 	bl	80017d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013de:	2019      	movs	r0, #25
 80013e0:	f000 fa16 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_InitTick+0xa4>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_InitTick+0xa4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6453      	str	r3, [r2, #68]	; 0x44
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_InitTick+0xa4>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001400:	f107 0210 	add.w	r2, r7, #16
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fd00 	bl	8002e10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001410:	f001 fcea 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <HAL_InitTick+0xa8>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0c9b      	lsrs	r3, r3, #18
 8001424:	3b01      	subs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_InitTick+0xac>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <HAL_InitTick+0xb0>)
 800142c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_InitTick+0xac>)
 8001430:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001434:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_InitTick+0xac>)
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_InitTick+0xac>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_InitTick+0xac>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <HAL_InitTick+0xac>)
 800144a:	f002 f963 	bl	8003714 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d104      	bne.n	800145e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001454:	4806      	ldr	r0, [pc, #24]	; (8001470 <HAL_InitTick+0xac>)
 8001456:	f002 f9b7 	bl	80037c8 <HAL_TIM_Base_Start_IT>
 800145a:	4603      	mov	r3, r0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3730      	adds	r7, #48	; 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	431bde83 	.word	0x431bde83
 8001470:	20004560 	.word	0x20004560
 8001474:	40010000 	.word	0x40010000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014aa:	f002 f9fd 	bl	80038a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20004560 	.word	0x20004560

080014b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <_sbrk+0x5c>)
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <_sbrk+0x60>)
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <_sbrk+0x64>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <_sbrk+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e8:	f004 f828 	bl	800553c <__errno>
 80014ec:	4603      	mov	r3, r0
 80014ee:	220c      	movs	r2, #12
 80014f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	e009      	b.n	800150c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <_sbrk+0x64>)
 8001508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20020000 	.word	0x20020000
 8001518:	00000400 	.word	0x00000400
 800151c:	200006f8 	.word	0x200006f8
 8001520:	200045c0 	.word	0x200045c0

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <SystemInit+0x20>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <SystemInit+0x20>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001572:	f7ff ffd7 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f003 ffe7 	bl	8005548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff f907 	bl	800078c <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800158c:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 8001590:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001594:	200045bc 	.word	0x200045bc

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f8fc 	bl	80017c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f7ff fefa 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fe08 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000010 	.word	0x20000010
 8001604:	200045a8 	.word	0x200045a8

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200045a8 	.word	0x200045a8

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000010 	.word	0x20000010

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff4c 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ea:	f7ff ff61 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7ff ffb1 	bl	800175c <NVIC_EncodePriority>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff80 	bl	8001708 <__NVIC_SetPriority>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff54 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e165      	b.n	8001b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8154 	bne.w	8001b0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187a:	2b02      	cmp	r3, #2
 800187c:	d130      	bne.n	80018e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0201 	and.w	r2, r3, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d017      	beq.n	800191c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d123      	bne.n	8001970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80ae 	beq.w	8001b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_GPIO_Init+0x300>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_GPIO_Init+0x300>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_GPIO_Init+0x300>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ce:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_GPIO_Init+0x304>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4f      	ldr	r2, [pc, #316]	; (8001b34 <HAL_GPIO_Init+0x308>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x21a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	; (8001b38 <HAL_GPIO_Init+0x30c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x216>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4d      	ldr	r2, [pc, #308]	; (8001b3c <HAL_GPIO_Init+0x310>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x314>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x20e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4b      	ldr	r2, [pc, #300]	; (8001b44 <HAL_GPIO_Init+0x318>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x20a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_GPIO_Init+0x31c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x206>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x202>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x304>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f ae96 	bls.w	8001848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40021400 	.word	0x40021400
 8001b4c:	40021800 	.word	0x40021800
 8001b50:	40013c00 	.word	0x40013c00

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b98:	887a      	ldrh	r2, [r7, #2]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	041a      	lsls	r2, r3, #16
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e12b      	b.n	8001e26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fb2a 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c20:	f001 f8ce 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a81      	ldr	r2, [pc, #516]	; (8001e30 <HAL_I2C_Init+0x274>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d807      	bhi.n	8001c40 <HAL_I2C_Init+0x84>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4a80      	ldr	r2, [pc, #512]	; (8001e34 <HAL_I2C_Init+0x278>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	bf94      	ite	ls
 8001c38:	2301      	movls	r3, #1
 8001c3a:	2300      	movhi	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	e006      	b.n	8001c4e <HAL_I2C_Init+0x92>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a7d      	ldr	r2, [pc, #500]	; (8001e38 <HAL_I2C_Init+0x27c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0e7      	b.n	8001e26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4a78      	ldr	r2, [pc, #480]	; (8001e3c <HAL_I2C_Init+0x280>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_I2C_Init+0x274>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d802      	bhi.n	8001c90 <HAL_I2C_Init+0xd4>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	e009      	b.n	8001ca4 <HAL_I2C_Init+0xe8>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a69      	ldr	r2, [pc, #420]	; (8001e40 <HAL_I2C_Init+0x284>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	495c      	ldr	r1, [pc, #368]	; (8001e30 <HAL_I2C_Init+0x274>)
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	d819      	bhi.n	8001cf8 <HAL_I2C_Init+0x13c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd2:	1c59      	adds	r1, r3, #1
 8001cd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cd8:	400b      	ands	r3, r1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_I2C_Init+0x138>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e59      	subs	r1, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf2:	e051      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e04f      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d111      	bne.n	8001d24 <HAL_I2C_Init+0x168>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	440b      	add	r3, r1
 8001d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e012      	b.n	8001d4a <HAL_I2C_Init+0x18e>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	0099      	lsls	r1, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Init+0x196>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e022      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10e      	bne.n	8001d78 <HAL_I2C_Init+0x1bc>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1e58      	subs	r0, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	440b      	add	r3, r1
 8001d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d76:	e00f      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	6809      	ldr	r1, [r1, #0]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6911      	ldr	r1, [r2, #16]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68d2      	ldr	r2, [r2, #12]
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	000186a0 	.word	0x000186a0
 8001e34:	001e847f 	.word	0x001e847f
 8001e38:	003d08ff 	.word	0x003d08ff
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	817b      	strh	r3, [r7, #10]
 8001e56:	460b      	mov	r3, r1
 8001e58:	813b      	strh	r3, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff fbd3 	bl	8001608 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	f040 80d9 	bne.w	8002024 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2319      	movs	r3, #25
 8001e78:	2201      	movs	r2, #1
 8001e7a:	496d      	ldr	r1, [pc, #436]	; (8002030 <HAL_I2C_Mem_Write+0x1ec>)
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fc7f 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0cc      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Mem_Write+0x56>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0c5      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d007      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2221      	movs	r2, #33	; 0x21
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_I2C_Mem_Write+0x1f0>)
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f02:	88f8      	ldrh	r0, [r7, #6]
 8001f04:	893a      	ldrh	r2, [r7, #8]
 8001f06:	8979      	ldrh	r1, [r7, #10]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4603      	mov	r3, r0
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fab6 	bl	8002484 <I2C_RequestMemoryWrite>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d052      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e081      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fd00 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d107      	bne.n	8001f4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06b      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_I2C_Mem_Write+0x180>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1aa      	bne.n	8001f22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fcec 	bl	80029ae <I2C_WaitOnBTFFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d107      	bne.n	8001ff4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e016      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	00100002 	.word	0x00100002
 8002034:	ffff0000 	.word	0xffff0000

08002038 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08c      	sub	sp, #48	; 0x30
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	817b      	strh	r3, [r7, #10]
 800204a:	460b      	mov	r3, r1
 800204c:	813b      	strh	r3, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002052:	f7ff fad9 	bl	8001608 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b20      	cmp	r3, #32
 8002062:	f040 8208 	bne.w	8002476 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2319      	movs	r3, #25
 800206c:	2201      	movs	r2, #1
 800206e:	497b      	ldr	r1, [pc, #492]	; (800225c <HAL_I2C_Mem_Read+0x224>)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fb85 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
 800207e:	e1fb      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_I2C_Mem_Read+0x56>
 800208a:	2302      	movs	r3, #2
 800208c:	e1f4      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d007      	beq.n	80020b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2222      	movs	r2, #34	; 0x22
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a5b      	ldr	r2, [pc, #364]	; (8002260 <HAL_I2C_Mem_Read+0x228>)
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020f6:	88f8      	ldrh	r0, [r7, #6]
 80020f8:	893a      	ldrh	r2, [r7, #8]
 80020fa:	8979      	ldrh	r1, [r7, #10]
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4603      	mov	r3, r0
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa52 	bl	80025b0 <I2C_RequestMemoryRead>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1b0      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d113      	bne.n	8002146 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	623b      	str	r3, [r7, #32]
 8002132:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e184      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d11b      	bne.n	8002186 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e164      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	2b02      	cmp	r3, #2
 800218c:	d11b      	bne.n	80021c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	e144      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80021dc:	e138      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	f200 80f1 	bhi.w	80023ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d123      	bne.n	8002238 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fc1b 	bl	8002a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e139      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002236:	e10b      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b02      	cmp	r3, #2
 800223e:	d14e      	bne.n	80022de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002246:	2200      	movs	r2, #0
 8002248:	4906      	ldr	r1, [pc, #24]	; (8002264 <HAL_I2C_Mem_Read+0x22c>)
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa98 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e10e      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
 800225a:	bf00      	nop
 800225c:	00100002 	.word	0x00100002
 8002260:	ffff0000 	.word	0xffff0000
 8002264:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022dc:	e0b8      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e4:	2200      	movs	r2, #0
 80022e6:	4966      	ldr	r1, [pc, #408]	; (8002480 <HAL_I2C_Mem_Read+0x448>)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fa49 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0bf      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002340:	2200      	movs	r2, #0
 8002342:	494f      	ldr	r1, [pc, #316]	; (8002480 <HAL_I2C_Mem_Read+0x448>)
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa1b 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e091      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023c8:	e042      	b.n	8002450 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 fb2e 	bl	8002a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e04c      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d118      	bne.n	8002450 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f aec2 	bne.w	80021de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	00010004 	.word	0x00010004

08002484 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	461a      	mov	r2, r3
 8002492:	4603      	mov	r3, r0
 8002494:	817b      	strh	r3, [r7, #10]
 8002496:	460b      	mov	r3, r1
 8002498:	813b      	strh	r3, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f960 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d4:	d103      	bne.n	80024de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e05f      	b.n	80025a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024e2:	897b      	ldrh	r3, [r7, #10]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	6a3a      	ldr	r2, [r7, #32]
 80024f6:	492d      	ldr	r1, [pc, #180]	; (80025ac <I2C_RequestMemoryWrite+0x128>)
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f998 	bl	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e04c      	b.n	80025a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002520:	6a39      	ldr	r1, [r7, #32]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fa02 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b04      	cmp	r3, #4
 8002534:	d107      	bne.n	8002546 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02b      	b.n	80025a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d105      	bne.n	800255c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002550:	893b      	ldrh	r3, [r7, #8]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e021      	b.n	80025a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2da      	uxtb	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f9dc 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b04      	cmp	r3, #4
 8002580:	d107      	bne.n	8002592 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e005      	b.n	80025a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002596:	893b      	ldrh	r3, [r7, #8]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	00010002 	.word	0x00010002

080025b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f8c2 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002610:	d103      	bne.n	800261a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0aa      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261e:	897b      	ldrh	r3, [r7, #10]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800262c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	4952      	ldr	r1, [pc, #328]	; (800277c <I2C_RequestMemoryRead+0x1cc>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f8fa 	bl	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e097      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f964 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b04      	cmp	r3, #4
 8002670:	d107      	bne.n	8002682 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002680:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e076      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800268c:	893b      	ldrh	r3, [r7, #8]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e021      	b.n	80026dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29b      	uxth	r3, r3
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f93e 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e050      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d2:	893b      	ldrh	r3, [r7, #8]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	6a39      	ldr	r1, [r7, #32]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f923 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00d      	beq.n	8002708 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d107      	bne.n	8002704 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e035      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002716:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f82b 	bl	8002780 <I2C_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273e:	d103      	bne.n	8002748 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e013      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	6a3a      	ldr	r2, [r7, #32]
 8002760:	4906      	ldr	r1, [pc, #24]	; (800277c <I2C_RequestMemoryRead+0x1cc>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f863 	bl	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	00010002 	.word	0x00010002

08002780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	e025      	b.n	80027de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002798:	d021      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7fe ff35 	bl	8001608 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e023      	b.n	8002826 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10d      	bne.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	e00c      	b.n	800281e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	43da      	mvns	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	429a      	cmp	r2, r3
 8002822:	d0b6      	beq.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800283c:	e051      	b.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284c:	d123      	bne.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002866:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e046      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d021      	beq.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe feb3 	bl	8001608 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e020      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10c      	bne.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e00b      	b.n	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	43da      	mvns	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4013      	ands	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d18d      	bne.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002938:	e02d      	b.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8ce 	bl	8002adc <I2C_IsAcknowledgeFailed>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e02d      	b.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d021      	beq.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7fe fe59 	bl	8001608 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d116      	bne.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e007      	b.n	80029a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d1ca      	bne.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ba:	e02d      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f88d 	bl	8002adc <I2C_IsAcknowledgeFailed>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e02d      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d021      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7fe fe18 	bl	8001608 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d116      	bne.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e007      	b.n	8002a28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d1ca      	bne.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a3c:	e042      	b.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d119      	bne.n	8002a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0210 	mvn.w	r2, #16
 8002a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e029      	b.n	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a80:	f7fe fdc2 	bl	8001608 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d302      	bcc.n	8002a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d116      	bne.n	8002ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e007      	b.n	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d1b5      	bne.n	8002a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af2:	d11b      	bne.n	8002b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0204 	orr.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x90>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x90>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_PWREx_EnableOverDrive+0x90>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b68:	f7fe fd4e 	bl	8001608 <HAL_GetTick>
 8002b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b6e:	e009      	b.n	8002b84 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b70:	f7fe fd4a 	bl	8001608 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7e:	d901      	bls.n	8002b84 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e01f      	b.n	8002bc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d1ee      	bne.n	8002b70 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b98:	f7fe fd36 	bl	8001608 <HAL_GetTick>
 8002b9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b9e:	e009      	b.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba0:	f7fe fd32 	bl	8001608 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bae:	d901      	bls.n	8002bb4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e007      	b.n	8002bc4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc0:	d1ee      	bne.n	8002ba0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	420e0040 	.word	0x420e0040
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	420e0044 	.word	0x420e0044

08002bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0cc      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d90c      	bls.n	8002c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b65      	ldr	r3, [pc, #404]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0b8      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d020      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c48:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	494d      	ldr	r1, [pc, #308]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d044      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d119      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d003      	beq.n	8002c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e067      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 0203 	bic.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4934      	ldr	r1, [pc, #208]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fc9c 	bl	8001608 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	e00a      	b.n	8002cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd4:	f7fe fc98 	bl	8001608 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e04f      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	4b2b      	ldr	r3, [pc, #172]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 020c 	and.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d1eb      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d20c      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e032      	b.n	8002d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4916      	ldr	r1, [pc, #88]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	490e      	ldr	r1, [pc, #56]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d62:	f000 f887 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	490a      	ldr	r1, [pc, #40]	; (8002d9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	5ccb      	ldrb	r3, [r1, r3]
 8002d76:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fb1e 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023c00 	.word	0x40023c00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08006c28 	.word	0x08006c28
 8002da0:	20000008 	.word	0x20000008
 8002da4:	2000000c 	.word	0x2000000c

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000008 	.word	0x20000008

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0a9b      	lsrs	r3, r3, #10
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	08006c38 	.word	0x08006c38

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffdc 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0b5b      	lsrs	r3, r3, #13
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08006c38 	.word	0x08006c38

08002e10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	08db      	lsrs	r3, r3, #3
 8002e4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e52:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_RCC_GetClockConfig+0x60>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40023c00 	.word	0x40023c00

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4bce      	ldr	r3, [pc, #824]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	f200 818d 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x344>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	080031b9 	.word	0x080031b9
 8002eac:	080031b9 	.word	0x080031b9
 8002eb0:	080031b9 	.word	0x080031b9
 8002eb4:	08002edf 	.word	0x08002edf
 8002eb8:	080031b9 	.word	0x080031b9
 8002ebc:	080031b9 	.word	0x080031b9
 8002ec0:	080031b9 	.word	0x080031b9
 8002ec4:	08002ee5 	.word	0x08002ee5
 8002ec8:	080031b9 	.word	0x080031b9
 8002ecc:	080031b9 	.word	0x080031b9
 8002ed0:	080031b9 	.word	0x080031b9
 8002ed4:	08003059 	.word	0x08003059
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4bbd      	ldr	r3, [pc, #756]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002eda:	61bb      	str	r3, [r7, #24]
       break;
 8002edc:	e16f      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ede:	4bbd      	ldr	r3, [pc, #756]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x360>)
 8002ee0:	61bb      	str	r3, [r7, #24]
      break;
 8002ee2:	e16c      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee4:	4bb9      	ldr	r3, [pc, #740]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eec:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eee:	4bb7      	ldr	r3, [pc, #732]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d053      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	4bb4      	ldr	r3, [pc, #720]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	461a      	mov	r2, r3
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	ea02 0400 	and.w	r4, r2, r0
 8002f12:	603c      	str	r4, [r7, #0]
 8002f14:	400b      	ands	r3, r1
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	4629      	mov	r1, r5
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	014b      	lsls	r3, r1, #5
 8002f2a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f2e:	0142      	lsls	r2, r0, #5
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	4623      	mov	r3, r4
 8002f36:	1ac0      	subs	r0, r0, r3
 8002f38:	462b      	mov	r3, r5
 8002f3a:	eb61 0103 	sbc.w	r1, r1, r3
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	018b      	lsls	r3, r1, #6
 8002f48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f4c:	0182      	lsls	r2, r0, #6
 8002f4e:	1a12      	subs	r2, r2, r0
 8002f50:	eb63 0301 	sbc.w	r3, r3, r1
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	00d9      	lsls	r1, r3, #3
 8002f5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f62:	00d0      	lsls	r0, r2, #3
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4621      	mov	r1, r4
 8002f6a:	1852      	adds	r2, r2, r1
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	eb43 0101 	adc.w	r1, r3, r1
 8002f72:	460b      	mov	r3, r1
 8002f74:	f04f 0000 	mov.w	r0, #0
 8002f78:	f04f 0100 	mov.w	r1, #0
 8002f7c:	0259      	lsls	r1, r3, #9
 8002f7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f82:	0250      	lsls	r0, r2, #9
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f7fd f98c 	bl	80002b0 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e04c      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b8a      	ldr	r3, [pc, #552]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	ea02 0a00 	and.w	sl, r2, r0
 8002fba:	ea03 0b01 	and.w	fp, r3, r1
 8002fbe:	4650      	mov	r0, sl
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	014b      	lsls	r3, r1, #5
 8002fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd0:	0142      	lsls	r2, r0, #5
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	ebb0 000a 	subs.w	r0, r0, sl
 8002fda:	eb61 010b 	sbc.w	r1, r1, fp
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	018b      	lsls	r3, r1, #6
 8002fe8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fec:	0182      	lsls	r2, r0, #6
 8002fee:	1a12      	subs	r2, r2, r0
 8002ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	f04f 0100 	mov.w	r1, #0
 8002ffc:	00d9      	lsls	r1, r3, #3
 8002ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003002:	00d0      	lsls	r0, r2, #3
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	eb12 020a 	adds.w	r2, r2, sl
 800300c:	eb43 030b 	adc.w	r3, r3, fp
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0299      	lsls	r1, r3, #10
 800301a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800301e:	0290      	lsls	r0, r2, #10
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	461a      	mov	r2, r3
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	f7fd f93e 	bl	80002b0 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4613      	mov	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800303c:	4b63      	ldr	r3, [pc, #396]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	3301      	adds	r3, #1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	61bb      	str	r3, [r7, #24]
      break;
 8003056:	e0b2      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003058:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003060:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003062:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d04d      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	461a      	mov	r2, r3
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800307e:	f04f 0100 	mov.w	r1, #0
 8003082:	ea02 0800 	and.w	r8, r2, r0
 8003086:	ea03 0901 	and.w	r9, r3, r1
 800308a:	4640      	mov	r0, r8
 800308c:	4649      	mov	r1, r9
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	014b      	lsls	r3, r1, #5
 8003098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800309c:	0142      	lsls	r2, r0, #5
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	ebb0 0008 	subs.w	r0, r0, r8
 80030a6:	eb61 0109 	sbc.w	r1, r1, r9
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	018b      	lsls	r3, r1, #6
 80030b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030b8:	0182      	lsls	r2, r0, #6
 80030ba:	1a12      	subs	r2, r2, r0
 80030bc:	eb63 0301 	sbc.w	r3, r3, r1
 80030c0:	f04f 0000 	mov.w	r0, #0
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	00d9      	lsls	r1, r3, #3
 80030ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ce:	00d0      	lsls	r0, r2, #3
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	eb12 0208 	adds.w	r2, r2, r8
 80030d8:	eb43 0309 	adc.w	r3, r3, r9
 80030dc:	f04f 0000 	mov.w	r0, #0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	0259      	lsls	r1, r3, #9
 80030e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030ea:	0250      	lsls	r0, r2, #9
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd f8d8 	bl	80002b0 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	e04a      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	461a      	mov	r2, r3
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	f240 10ff 	movw	r0, #511	; 0x1ff
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	ea02 0400 	and.w	r4, r2, r0
 8003122:	ea03 0501 	and.w	r5, r3, r1
 8003126:	4620      	mov	r0, r4
 8003128:	4629      	mov	r1, r5
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	014b      	lsls	r3, r1, #5
 8003134:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003138:	0142      	lsls	r2, r0, #5
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	1b00      	subs	r0, r0, r4
 8003140:	eb61 0105 	sbc.w	r1, r1, r5
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	018b      	lsls	r3, r1, #6
 800314e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003152:	0182      	lsls	r2, r0, #6
 8003154:	1a12      	subs	r2, r2, r0
 8003156:	eb63 0301 	sbc.w	r3, r3, r1
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	00d9      	lsls	r1, r3, #3
 8003164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003168:	00d0      	lsls	r0, r2, #3
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	1912      	adds	r2, r2, r4
 8003170:	eb45 0303 	adc.w	r3, r5, r3
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	0299      	lsls	r1, r3, #10
 800317e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003182:	0290      	lsls	r0, r2, #10
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	461a      	mov	r2, r3
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	f7fd f88c 	bl	80002b0 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_RCC_GetSysClockFreq+0x358>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	0f1b      	lsrs	r3, r3, #28
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	61bb      	str	r3, [r7, #24]
      break;
 80031b6:	e002      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031ba:	61bb      	str	r3, [r7, #24]
      break;
 80031bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031be:	69bb      	ldr	r3, [r7, #24]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	00f42400 	.word	0x00f42400
 80031d4:	007a1200 	.word	0x007a1200

080031d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e28d      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8083 	beq.w	80032fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031f8:	4b94      	ldr	r3, [pc, #592]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b04      	cmp	r3, #4
 8003202:	d019      	beq.n	8003238 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003204:	4b91      	ldr	r3, [pc, #580]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800320c:	2b08      	cmp	r3, #8
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003210:	4b8e      	ldr	r3, [pc, #568]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800321c:	d00c      	beq.n	8003238 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321e:	4b8b      	ldr	r3, [pc, #556]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d112      	bne.n	8003250 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003236:	d10b      	bne.n	8003250 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4b84      	ldr	r3, [pc, #528]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d05b      	beq.n	80032fc <HAL_RCC_OscConfig+0x124>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d157      	bne.n	80032fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e25a      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d106      	bne.n	8003268 <HAL_RCC_OscConfig+0x90>
 800325a:	4b7c      	ldr	r3, [pc, #496]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7b      	ldr	r2, [pc, #492]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e01d      	b.n	80032a4 <HAL_RCC_OscConfig+0xcc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0xb4>
 8003272:	4b76      	ldr	r3, [pc, #472]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b73      	ldr	r3, [pc, #460]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a72      	ldr	r2, [pc, #456]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e00b      	b.n	80032a4 <HAL_RCC_OscConfig+0xcc>
 800328c:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6e      	ldr	r2, [pc, #440]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b6c      	ldr	r3, [pc, #432]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6b      	ldr	r2, [pc, #428]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe f9ac 	bl	8001608 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe f9a8 	bl	8001608 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e21f      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0xdc>
 80032d2:	e014      	b.n	80032fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe f998 	bl	8001608 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fe f994 	bl	8001608 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	; 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e20b      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x104>
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06f      	beq.n	80033ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800330a:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b00      	cmp	r3, #0
 8003314:	d017      	beq.n	8003346 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003316:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800331e:	2b08      	cmp	r3, #8
 8003320:	d105      	bne.n	800332e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003322:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d11c      	bne.n	8003374 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x186>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e1d3      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4937      	ldr	r1, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003372:	e03a      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d020      	beq.n	80033be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800337c:	4b34      	ldr	r3, [pc, #208]	; (8003450 <HAL_RCC_OscConfig+0x278>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe f941 	bl	8001608 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe f93d 	bl	8001608 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1b4      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_OscConfig+0x274>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4925      	ldr	r1, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCC_OscConfig+0x278>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe f920 	bl	8001608 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033cc:	f7fe f91c 	bl	8001608 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e193      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_RCC_OscConfig+0x27c>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe f900 	bl	8001608 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340c:	f7fe f8fc 	bl	8001608 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e173      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_OscConfig+0x274>)
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x234>
 800342a:	e01b      	b.n	8003464 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x27c>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe f8e9 	bl	8001608 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	e00e      	b.n	8003458 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343a:	f7fe f8e5 	bl	8001608 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d907      	bls.n	8003458 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e15c      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
 800344c:	40023800 	.word	0x40023800
 8003450:	42470000 	.word	0x42470000
 8003454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003458:	4b8a      	ldr	r3, [pc, #552]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ea      	bne.n	800343a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8097 	beq.w	80035a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003476:	4b83      	ldr	r3, [pc, #524]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a7e      	ldr	r2, [pc, #504]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b7c      	ldr	r3, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	4b79      	ldr	r3, [pc, #484]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d118      	bne.n	80034e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7fe f8a5 	bl	8001608 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c2:	f7fe f8a1 	bl	8001608 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e118      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x4b0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x31e>
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6713      	str	r3, [r2, #112]	; 0x70
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x358>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x340>
 80034fe:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	4a60      	ldr	r2, [pc, #384]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6713      	str	r3, [r2, #112]	; 0x70
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a5d      	ldr	r2, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	e00b      	b.n	8003530 <HAL_RCC_OscConfig+0x358>
 8003518:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	4a59      	ldr	r2, [pc, #356]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6713      	str	r3, [r2, #112]	; 0x70
 8003524:	4b57      	ldr	r3, [pc, #348]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a56      	ldr	r2, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800352a:	f023 0304 	bic.w	r3, r3, #4
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe f866 	bl	8001608 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fe f862 	bl	8001608 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0d7      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003556:	4b4b      	ldr	r3, [pc, #300]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0ee      	beq.n	8003540 <HAL_RCC_OscConfig+0x368>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fe f850 	bl	8001608 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe f84c 	bl	8001608 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0c1      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003582:	4b40      	ldr	r3, [pc, #256]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ee      	bne.n	800356c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003594:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	4a3a      	ldr	r2, [pc, #232]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800359a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80ad 	beq.w	8003704 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d060      	beq.n	8003678 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d145      	bne.n	800364a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x4b4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe f820 	bl	8001608 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe f81c 	bl	8001608 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e093      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	3b01      	subs	r3, #1
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	071b      	lsls	r3, r3, #28
 8003616:	491b      	ldr	r1, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 8003618:	4313      	orrs	r3, r2
 800361a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_OscConfig+0x4b4>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd fff1 	bl	8001608 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fd ffed 	bl	8001608 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e064      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x452>
 8003648:	e05c      	b.n	8003704 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCC_OscConfig+0x4b4>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd ffda 	bl	8001608 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003658:	f7fd ffd6 	bl	8001608 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e04d      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_OscConfig+0x4ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x480>
 8003676:	e045      	b.n	8003704 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e040      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
 800368c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_RCC_OscConfig+0x538>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d030      	beq.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d129      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d122      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d119      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	3b01      	subs	r3, #1
 80036da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d10f      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e041      	b.n	80037aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f839 	bl	80037b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3304      	adds	r3, #4
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f000 f9d8 	bl	8003b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e04e      	b.n	800387e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_TIM_Base_Start_IT+0xc4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d022      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380a:	d01d      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <HAL_TIM_Base_Start_IT+0xc8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d018      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <HAL_TIM_Base_Start_IT+0xcc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d013      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1c      	ldr	r2, [pc, #112]	; (8003898 <HAL_TIM_Base_Start_IT+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00e      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1b      	ldr	r2, [pc, #108]	; (800389c <HAL_TIM_Base_Start_IT+0xd4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d009      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0x80>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b06      	cmp	r3, #6
 8003858:	d010      	beq.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e007      	b.n	800387c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	40010400 	.word	0x40010400
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40001800 	.word	0x40001800

080038a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0202 	mvn.w	r2, #2
 80038d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8ee 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8e0 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8f1 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0204 	mvn.w	r2, #4
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8c4 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8b6 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8c7 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b08      	cmp	r3, #8
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0208 	mvn.w	r2, #8
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2204      	movs	r2, #4
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f89a 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f88c 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f89d 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d122      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d11b      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0210 	mvn.w	r2, #16
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f870 	bl	8003acc <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f862 	bl	8003ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f873 	bl	8003ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0201 	mvn.w	r2, #1
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f91a 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b80      	cmp	r3, #128	; 0x80
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f902 	bl	8003c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f838 	bl	8003af4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d10e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d107      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0220 	mvn.w	r2, #32
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8cc 	bl	8003c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <TIM_Base_SetConfig+0x114>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b26:	d00f      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3d      	ldr	r2, [pc, #244]	; (8003c20 <TIM_Base_SetConfig+0x118>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3c      	ldr	r2, [pc, #240]	; (8003c24 <TIM_Base_SetConfig+0x11c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3b      	ldr	r2, [pc, #236]	; (8003c28 <TIM_Base_SetConfig+0x120>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3a      	ldr	r2, [pc, #232]	; (8003c2c <TIM_Base_SetConfig+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d108      	bne.n	8003b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <TIM_Base_SetConfig+0x114>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d027      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <TIM_Base_SetConfig+0x118>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d023      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <TIM_Base_SetConfig+0x11c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01f      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <TIM_Base_SetConfig+0x120>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01b      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <TIM_Base_SetConfig+0x124>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d017      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <TIM_Base_SetConfig+0x128>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d013      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <TIM_Base_SetConfig+0x12c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00f      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <TIM_Base_SetConfig+0x130>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a25      	ldr	r2, [pc, #148]	; (8003c3c <TIM_Base_SetConfig+0x134>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <TIM_Base_SetConfig+0x138>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <TIM_Base_SetConfig+0x13c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <TIM_Base_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0xf8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <TIM_Base_SetConfig+0x124>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40010400 	.word	0x40010400
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800
 8003c3c:	40001800 	.word	0x40001800
 8003c40:	40001c00 	.word	0x40001c00
 8003c44:	40002000 	.word	0x40002000

08003c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e03f      	b.n	8003d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fb18 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f829 	bl	8003d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d10:	b09f      	sub	sp, #124	; 0x7c
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d22:	68d9      	ldr	r1, [r3, #12]
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	ea40 0301 	orr.w	r3, r0, r1
 8003d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d50:	f021 010c 	bic.w	r1, r1, #12
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	6999      	ldr	r1, [r3, #24]
 8003d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	ea40 0301 	orr.w	r3, r0, r1
 8003d74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4bc5      	ldr	r3, [pc, #788]	; (8004090 <UART_SetConfig+0x384>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d004      	beq.n	8003d8a <UART_SetConfig+0x7e>
 8003d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4bc3      	ldr	r3, [pc, #780]	; (8004094 <UART_SetConfig+0x388>)
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d103      	bne.n	8003d92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d8a:	f7ff f82d 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8003d8e:	6778      	str	r0, [r7, #116]	; 0x74
 8003d90:	e002      	b.n	8003d98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d92:	f7ff f815 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8003d96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da0:	f040 80b6 	bne.w	8003f10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da6:	461c      	mov	r4, r3
 8003da8:	f04f 0500 	mov.w	r5, #0
 8003dac:	4622      	mov	r2, r4
 8003dae:	462b      	mov	r3, r5
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	6439      	str	r1, [r7, #64]	; 0x40
 8003db4:	415b      	adcs	r3, r3
 8003db6:	647b      	str	r3, [r7, #68]	; 0x44
 8003db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dbc:	1912      	adds	r2, r2, r4
 8003dbe:	eb45 0303 	adc.w	r3, r5, r3
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	00d9      	lsls	r1, r3, #3
 8003dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd0:	00d0      	lsls	r0, r2, #3
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	1911      	adds	r1, r2, r4
 8003dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8003dda:	416b      	adcs	r3, r5
 8003ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	1891      	adds	r1, r2, r2
 8003dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dec:	415b      	adcs	r3, r3
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003df4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003df8:	f7fc fa5a 	bl	80002b0 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4ba5      	ldr	r3, [pc, #660]	; (8004098 <UART_SetConfig+0x38c>)
 8003e02:	fba3 2302 	umull	r2, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	011e      	lsls	r6, r3, #4
 8003e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0c:	461c      	mov	r4, r3
 8003e0e:	f04f 0500 	mov.w	r5, #0
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	6339      	str	r1, [r7, #48]	; 0x30
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e22:	1912      	adds	r2, r2, r4
 8003e24:	eb45 0303 	adc.w	r3, r5, r3
 8003e28:	f04f 0000 	mov.w	r0, #0
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	00d9      	lsls	r1, r3, #3
 8003e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e36:	00d0      	lsls	r0, r2, #3
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	1911      	adds	r1, r2, r4
 8003e3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e40:	416b      	adcs	r3, r5
 8003e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	1891      	adds	r1, r2, r2
 8003e50:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e52:	415b      	adcs	r3, r3
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e5e:	f7fc fa27 	bl	80002b0 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <UART_SetConfig+0x38c>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	; 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	3332      	adds	r3, #50	; 0x32
 8003e7a:	4a87      	ldr	r2, [pc, #540]	; (8004098 <UART_SetConfig+0x38c>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e88:	441e      	add	r6, r3
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	1894      	adds	r4, r2, r2
 8003e98:	623c      	str	r4, [r7, #32]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea2:	1812      	adds	r2, r2, r0
 8003ea4:	eb41 0303 	adc.w	r3, r1, r3
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	f04f 0500 	mov.w	r5, #0
 8003eb0:	00dd      	lsls	r5, r3, #3
 8003eb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eb6:	00d4      	lsls	r4, r2, #3
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	1814      	adds	r4, r2, r0
 8003ebe:	653c      	str	r4, [r7, #80]	; 0x50
 8003ec0:	414b      	adcs	r3, r1
 8003ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	1891      	adds	r1, r2, r2
 8003ed0:	61b9      	str	r1, [r7, #24]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ede:	f7fc f9e7 	bl	80002b0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	; (8004098 <UART_SetConfig+0x38c>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	; 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a67      	ldr	r2, [pc, #412]	; (8004098 <UART_SetConfig+0x38c>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	f003 0207 	and.w	r2, r3, #7
 8003f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4432      	add	r2, r6
 8003f0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f0e:	e0b9      	b.n	8004084 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f12:	461c      	mov	r4, r3
 8003f14:	f04f 0500 	mov.w	r5, #0
 8003f18:	4622      	mov	r2, r4
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	6139      	str	r1, [r7, #16]
 8003f20:	415b      	adcs	r3, r3
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f28:	1912      	adds	r2, r2, r4
 8003f2a:	eb45 0303 	adc.w	r3, r5, r3
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	00d9      	lsls	r1, r3, #3
 8003f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f3c:	00d0      	lsls	r0, r2, #3
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	eb12 0804 	adds.w	r8, r2, r4
 8003f46:	eb43 0905 	adc.w	r9, r3, r5
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f04f 0100 	mov.w	r1, #0
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	008b      	lsls	r3, r1, #2
 8003f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f62:	0082      	lsls	r2, r0, #2
 8003f64:	4640      	mov	r0, r8
 8003f66:	4649      	mov	r1, r9
 8003f68:	f7fc f9a2 	bl	80002b0 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4b49      	ldr	r3, [pc, #292]	; (8004098 <UART_SetConfig+0x38c>)
 8003f72:	fba3 2302 	umull	r2, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	011e      	lsls	r6, r3, #4
 8003f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	1894      	adds	r4, r2, r2
 8003f88:	60bc      	str	r4, [r7, #8]
 8003f8a:	415b      	adcs	r3, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f92:	1812      	adds	r2, r2, r0
 8003f94:	eb41 0303 	adc.w	r3, r1, r3
 8003f98:	f04f 0400 	mov.w	r4, #0
 8003f9c:	f04f 0500 	mov.w	r5, #0
 8003fa0:	00dd      	lsls	r5, r3, #3
 8003fa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fa6:	00d4      	lsls	r4, r2, #3
 8003fa8:	4622      	mov	r2, r4
 8003faa:	462b      	mov	r3, r5
 8003fac:	1814      	adds	r4, r2, r0
 8003fae:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fb0:	414b      	adcs	r3, r1
 8003fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	008b      	lsls	r3, r1, #2
 8003fc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fcc:	0082      	lsls	r2, r0, #2
 8003fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fd2:	f7fc f96d 	bl	80002b0 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <UART_SetConfig+0x38c>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	; 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	3332      	adds	r3, #50	; 0x32
 8003fee:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <UART_SetConfig+0x38c>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffa:	441e      	add	r6, r3
 8003ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffe:	4618      	mov	r0, r3
 8004000:	f04f 0100 	mov.w	r1, #0
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	1894      	adds	r4, r2, r2
 800400a:	603c      	str	r4, [r7, #0]
 800400c:	415b      	adcs	r3, r3
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004014:	1812      	adds	r2, r2, r0
 8004016:	eb41 0303 	adc.w	r3, r1, r3
 800401a:	f04f 0400 	mov.w	r4, #0
 800401e:	f04f 0500 	mov.w	r5, #0
 8004022:	00dd      	lsls	r5, r3, #3
 8004024:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004028:	00d4      	lsls	r4, r2, #3
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	eb12 0a00 	adds.w	sl, r2, r0
 8004032:	eb43 0b01 	adc.w	fp, r3, r1
 8004036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800404e:	0082      	lsls	r2, r0, #2
 8004050:	4650      	mov	r0, sl
 8004052:	4659      	mov	r1, fp
 8004054:	f7fc f92c 	bl	80002b0 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <UART_SetConfig+0x38c>)
 800405e:	fba3 1302 	umull	r1, r3, r3, r2
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2164      	movs	r1, #100	; 0x64
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	3332      	adds	r3, #50	; 0x32
 8004070:	4a09      	ldr	r2, [pc, #36]	; (8004098 <UART_SetConfig+0x38c>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	f003 020f 	and.w	r2, r3, #15
 800407c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4432      	add	r2, r6
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	377c      	adds	r7, #124	; 0x7c
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	40011000 	.word	0x40011000
 8004094:	40011400 	.word	0x40011400
 8004098:	51eb851f 	.word	0x51eb851f

0800409c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ae:	2b84      	cmp	r3, #132	; 0x84
 80040b0:	d005      	beq.n	80040be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	3303      	adds	r3, #3
 80040bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80040be:	68fb      	ldr	r3, [r7, #12]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040d0:	f000 fade 	bl	8004690 <vTaskStartScheduler>
  
  return osOK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	bd80      	pop	{r7, pc}

080040da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040dc:	b089      	sub	sp, #36	; 0x24
 80040de:	af04      	add	r7, sp, #16
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <osThreadCreate+0x54>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01c      	beq.n	800412e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685c      	ldr	r4, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681d      	ldr	r5, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691e      	ldr	r6, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ffc8 	bl	800409c <makeFreeRtosPriority>
 800410c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004116:	9202      	str	r2, [sp, #8]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	9100      	str	r1, [sp, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4632      	mov	r2, r6
 8004120:	4629      	mov	r1, r5
 8004122:	4620      	mov	r0, r4
 8004124:	f000 f8ed 	bl	8004302 <xTaskCreateStatic>
 8004128:	4603      	mov	r3, r0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e01c      	b.n	8004168 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685c      	ldr	r4, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800413a:	b29e      	uxth	r6, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ffaa 	bl	800409c <makeFreeRtosPriority>
 8004148:	4602      	mov	r2, r0
 800414a:	f107 030c 	add.w	r3, r7, #12
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	9200      	str	r2, [sp, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4632      	mov	r2, r6
 8004156:	4629      	mov	r1, r5
 8004158:	4620      	mov	r0, r4
 800415a:	f000 f92f 	bl	80043bc <xTaskCreate>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d001      	beq.n	8004168 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	e000      	b.n	800416a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004172 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <osDelay+0x16>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	e000      	b.n	800418a <osDelay+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fa4c 	bl	8004628 <vTaskDelay>
  
  return osOK;
 8004190:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f103 0208 	add.w	r2, r3, #8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
 80041b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f103 0208 	add.w	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f103 0208 	add.w	r2, r3, #8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d103      	bne.n	800425c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e00c      	b.n	8004276 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3308      	adds	r3, #8
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e002      	b.n	800426a <vListInsert+0x2e>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d2f6      	bcs.n	8004264 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6852      	ldr	r2, [r2, #4]
 80042ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d103      	bne.n	80042e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08e      	sub	sp, #56	; 0x38
 8004306:	af04      	add	r7, sp, #16
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <xTaskCreateStatic+0x46>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004348:	2354      	movs	r3, #84	; 0x54
 800434a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b54      	cmp	r3, #84	; 0x54
 8004350:	d00a      	beq.n	8004368 <xTaskCreateStatic+0x66>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	61bb      	str	r3, [r7, #24]
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004368:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01e      	beq.n	80043ae <xTaskCreateStatic+0xac>
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01b      	beq.n	80043ae <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004388:	2300      	movs	r3, #0
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	9302      	str	r3, [sp, #8]
 8004390:	f107 0314 	add.w	r3, r7, #20
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f850 	bl	8004446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043a8:	f000 f8d4 	bl	8004554 <prvAddNewTaskToReadyList>
 80043ac:	e001      	b.n	80043b2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043b2:	697b      	ldr	r3, [r7, #20]
	}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3728      	adds	r7, #40	; 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af04      	add	r7, sp, #16
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fec9 	bl	8005168 <pvPortMalloc>
 80043d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043de:	2054      	movs	r0, #84	; 0x54
 80043e0:	f000 fec2 	bl	8005168 <pvPortMalloc>
 80043e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
 80043f2:	e005      	b.n	8004400 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043f4:	6978      	ldr	r0, [r7, #20]
 80043f6:	f000 ff83 	bl	8005300 <vPortFree>
 80043fa:	e001      	b.n	8004400 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d017      	beq.n	8004436 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	2300      	movs	r3, #0
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	9302      	str	r3, [sp, #8]
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f80e 	bl	8004446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800442a:	69f8      	ldr	r0, [r7, #28]
 800442c:	f000 f892 	bl	8004554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004430:	2301      	movs	r3, #1
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	e002      	b.n	800443c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
 800443a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800443c:	69bb      	ldr	r3, [r7, #24]
	}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b088      	sub	sp, #32
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800445e:	3b01      	subs	r3, #1
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f023 0307 	bic.w	r3, r3, #7
 800446c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <prvInitialiseNewTask+0x48>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	617b      	str	r3, [r7, #20]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01f      	beq.n	80044d4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e012      	b.n	80044c0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	7819      	ldrb	r1, [r3, #0]
 80044a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	3334      	adds	r3, #52	; 0x34
 80044aa:	460a      	mov	r2, r1
 80044ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	4413      	add	r3, r2
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	d9e9      	bls.n	800449a <prvInitialiseNewTask+0x54>
 80044c6:	e000      	b.n	80044ca <prvInitialiseNewTask+0x84>
			{
				break;
 80044c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d2:	e003      	b.n	80044dc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d901      	bls.n	80044e6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044e2:	2306      	movs	r3, #6
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2200      	movs	r2, #0
 80044f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fe6c 	bl	80041da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	3318      	adds	r3, #24
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff fe67 	bl	80041da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004510:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	f1c3 0207 	rsb	r2, r3, #7
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2200      	movs	r2, #0
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	69b8      	ldr	r0, [r7, #24]
 8004536:	f000 fc05 	bl	8004d44 <pxPortInitialiseStack>
 800453a:	4602      	mov	r2, r0
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800454c:	bf00      	nop
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800455c:	f000 fd22 	bl	8004fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004560:	4b2a      	ldr	r3, [pc, #168]	; (800460c <prvAddNewTaskToReadyList+0xb8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <prvAddNewTaskToReadyList+0xb8>)
 8004568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800456a:	4b29      	ldr	r3, [pc, #164]	; (8004610 <prvAddNewTaskToReadyList+0xbc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004572:	4a27      	ldr	r2, [pc, #156]	; (8004610 <prvAddNewTaskToReadyList+0xbc>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004578:	4b24      	ldr	r3, [pc, #144]	; (800460c <prvAddNewTaskToReadyList+0xb8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d110      	bne.n	80045a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004580:	f000 fabc 	bl	8004afc <prvInitialiseTaskLists>
 8004584:	e00d      	b.n	80045a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004586:	4b23      	ldr	r3, [pc, #140]	; (8004614 <prvAddNewTaskToReadyList+0xc0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <prvAddNewTaskToReadyList+0xbc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	429a      	cmp	r2, r3
 800459a:	d802      	bhi.n	80045a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <prvAddNewTaskToReadyList+0xbc>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045a2:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <prvAddNewTaskToReadyList+0xc4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <prvAddNewTaskToReadyList+0xc4>)
 80045aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	2201      	movs	r2, #1
 80045b2:	409a      	lsls	r2, r3
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <prvAddNewTaskToReadyList+0xc8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <prvAddNewTaskToReadyList+0xc8>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <prvAddNewTaskToReadyList+0xcc>)
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f7ff fe0d 	bl	80041f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045da:	f000 fd13 	bl	8005004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045de:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <prvAddNewTaskToReadyList+0xc0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045e6:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <prvAddNewTaskToReadyList+0xbc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d207      	bcs.n	8004604 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <prvAddNewTaskToReadyList+0xd0>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	200007fc 	.word	0x200007fc
 8004610:	200006fc 	.word	0x200006fc
 8004614:	20000808 	.word	0x20000808
 8004618:	20000818 	.word	0x20000818
 800461c:	20000804 	.word	0x20000804
 8004620:	20000700 	.word	0x20000700
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <vTaskDelay+0x60>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <vTaskDelay+0x30>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60bb      	str	r3, [r7, #8]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004658:	f000 f87a 	bl	8004750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800465c:	2100      	movs	r1, #0
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fb0a 	bl	8004c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004664:	f000 f882 	bl	800476c <xTaskResumeAll>
 8004668:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <vTaskDelay+0x64>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000824 	.word	0x20000824
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800469e:	463a      	mov	r2, r7
 80046a0:	1d39      	adds	r1, r7, #4
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc f856 	bl	8000758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046ac:	6839      	ldr	r1, [r7, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	9202      	str	r2, [sp, #8]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	2300      	movs	r3, #0
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2300      	movs	r3, #0
 80046bc:	460a      	mov	r2, r1
 80046be:	491e      	ldr	r1, [pc, #120]	; (8004738 <vTaskStartScheduler+0xa8>)
 80046c0:	481e      	ldr	r0, [pc, #120]	; (800473c <vTaskStartScheduler+0xac>)
 80046c2:	f7ff fe1e 	bl	8004302 <xTaskCreateStatic>
 80046c6:	4603      	mov	r3, r0
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <vTaskStartScheduler+0xb0>)
 80046ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046cc:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <vTaskStartScheduler+0xb0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e001      	b.n	80046de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d116      	bne.n	8004712 <vTaskStartScheduler+0x82>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	613b      	str	r3, [r7, #16]
}
 80046f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046f8:	4b12      	ldr	r3, [pc, #72]	; (8004744 <vTaskStartScheduler+0xb4>)
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004700:	4b11      	ldr	r3, [pc, #68]	; (8004748 <vTaskStartScheduler+0xb8>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <vTaskStartScheduler+0xbc>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800470c:	f000 fba8 	bl	8004e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004710:	e00e      	b.n	8004730 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d10a      	bne.n	8004730 <vTaskStartScheduler+0xa0>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	60fb      	str	r3, [r7, #12]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vTaskStartScheduler+0x9e>
}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08005ec4 	.word	0x08005ec4
 800473c:	08004acd 	.word	0x08004acd
 8004740:	20000820 	.word	0x20000820
 8004744:	2000081c 	.word	0x2000081c
 8004748:	20000808 	.word	0x20000808
 800474c:	20000800 	.word	0x20000800

08004750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <vTaskSuspendAll+0x18>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	4a03      	ldr	r2, [pc, #12]	; (8004768 <vTaskSuspendAll+0x18>)
 800475c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000824 	.word	0x20000824

0800476c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <xTaskResumeAll+0x114>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <xTaskResumeAll+0x2c>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	603b      	str	r3, [r7, #0]
}
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004798:	f000 fc04 	bl	8004fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800479c:	4b38      	ldr	r3, [pc, #224]	; (8004880 <xTaskResumeAll+0x114>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	4a37      	ldr	r2, [pc, #220]	; (8004880 <xTaskResumeAll+0x114>)
 80047a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a6:	4b36      	ldr	r3, [pc, #216]	; (8004880 <xTaskResumeAll+0x114>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d161      	bne.n	8004872 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047ae:	4b35      	ldr	r3, [pc, #212]	; (8004884 <xTaskResumeAll+0x118>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d05d      	beq.n	8004872 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047b6:	e02e      	b.n	8004816 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b8:	4b33      	ldr	r3, [pc, #204]	; (8004888 <xTaskResumeAll+0x11c>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3318      	adds	r3, #24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fd72 	bl	80042ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fd6d 	bl	80042ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	2201      	movs	r2, #1
 80047da:	409a      	lsls	r2, r3
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <xTaskResumeAll+0x120>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	4a2a      	ldr	r2, [pc, #168]	; (800488c <xTaskResumeAll+0x120>)
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4a27      	ldr	r2, [pc, #156]	; (8004890 <xTaskResumeAll+0x124>)
 80047f4:	441a      	add	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7ff fcf9 	bl	80041f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004806:	4b23      	ldr	r3, [pc, #140]	; (8004894 <xTaskResumeAll+0x128>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004810:	4b21      	ldr	r3, [pc, #132]	; (8004898 <xTaskResumeAll+0x12c>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004816:	4b1c      	ldr	r3, [pc, #112]	; (8004888 <xTaskResumeAll+0x11c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1cc      	bne.n	80047b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004824:	f000 fa08 	bl	8004c38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004828:	4b1c      	ldr	r3, [pc, #112]	; (800489c <xTaskResumeAll+0x130>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d010      	beq.n	8004856 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004834:	f000 f836 	bl	80048a4 <xTaskIncrementTick>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <xTaskResumeAll+0x12c>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f1      	bne.n	8004834 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <xTaskResumeAll+0x130>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <xTaskResumeAll+0x12c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800485e:	2301      	movs	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <xTaskResumeAll+0x134>)
 8004864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004872:	f000 fbc7 	bl	8005004 <vPortExitCritical>

	return xAlreadyYielded;
 8004876:	68bb      	ldr	r3, [r7, #8]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000824 	.word	0x20000824
 8004884:	200007fc 	.word	0x200007fc
 8004888:	200007bc 	.word	0x200007bc
 800488c:	20000804 	.word	0x20000804
 8004890:	20000700 	.word	0x20000700
 8004894:	200006fc 	.word	0x200006fc
 8004898:	20000810 	.word	0x20000810
 800489c:	2000080c 	.word	0x2000080c
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ae:	4b4e      	ldr	r3, [pc, #312]	; (80049e8 <xTaskIncrementTick+0x144>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 808e 	bne.w	80049d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048b8:	4b4c      	ldr	r3, [pc, #304]	; (80049ec <xTaskIncrementTick+0x148>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048c0:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <xTaskIncrementTick+0x148>)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d120      	bne.n	800490e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048cc:	4b48      	ldr	r3, [pc, #288]	; (80049f0 <xTaskIncrementTick+0x14c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <xTaskIncrementTick+0x48>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	603b      	str	r3, [r7, #0]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <xTaskIncrementTick+0x46>
 80048ec:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <xTaskIncrementTick+0x14c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	4b40      	ldr	r3, [pc, #256]	; (80049f4 <xTaskIncrementTick+0x150>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3e      	ldr	r2, [pc, #248]	; (80049f0 <xTaskIncrementTick+0x14c>)
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4a3e      	ldr	r2, [pc, #248]	; (80049f4 <xTaskIncrementTick+0x150>)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b3d      	ldr	r3, [pc, #244]	; (80049f8 <xTaskIncrementTick+0x154>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <xTaskIncrementTick+0x154>)
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	f000 f995 	bl	8004c38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800490e:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <xTaskIncrementTick+0x158>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d348      	bcc.n	80049aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004918:	4b35      	ldr	r3, [pc, #212]	; (80049f0 <xTaskIncrementTick+0x14c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <xTaskIncrementTick+0x158>)
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	601a      	str	r2, [r3, #0]
					break;
 800492a:	e03e      	b.n	80049aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800492c:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <xTaskIncrementTick+0x14c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d203      	bcs.n	800494c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004944:	4a2d      	ldr	r2, [pc, #180]	; (80049fc <xTaskIncrementTick+0x158>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800494a:	e02e      	b.n	80049aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fcac 	bl	80042ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	3318      	adds	r3, #24
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fca3 	bl	80042ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	2201      	movs	r2, #1
 800496e:	409a      	lsls	r2, r3
 8004970:	4b23      	ldr	r3, [pc, #140]	; (8004a00 <xTaskIncrementTick+0x15c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4313      	orrs	r3, r2
 8004976:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <xTaskIncrementTick+0x15c>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <xTaskIncrementTick+0x160>)
 8004988:	441a      	add	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f7ff fc2f 	bl	80041f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499a:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <xTaskIncrementTick+0x164>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d3b9      	bcc.n	8004918 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a8:	e7b6      	b.n	8004918 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049aa:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <xTaskIncrementTick+0x164>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	4914      	ldr	r1, [pc, #80]	; (8004a04 <xTaskIncrementTick+0x160>)
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d901      	bls.n	80049c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049c2:	2301      	movs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <xTaskIncrementTick+0x168>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	e004      	b.n	80049de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <xTaskIncrementTick+0x16c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <xTaskIncrementTick+0x16c>)
 80049dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000824 	.word	0x20000824
 80049ec:	20000800 	.word	0x20000800
 80049f0:	200007b4 	.word	0x200007b4
 80049f4:	200007b8 	.word	0x200007b8
 80049f8:	20000814 	.word	0x20000814
 80049fc:	2000081c 	.word	0x2000081c
 8004a00:	20000804 	.word	0x20000804
 8004a04:	20000700 	.word	0x20000700
 8004a08:	200006fc 	.word	0x200006fc
 8004a0c:	20000810 	.word	0x20000810
 8004a10:	2000080c 	.word	0x2000080c

08004a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <vTaskSwitchContext+0xa4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a22:	4b26      	ldr	r3, [pc, #152]	; (8004abc <vTaskSwitchContext+0xa8>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a28:	e03f      	b.n	8004aaa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004a2a:	4b24      	ldr	r3, [pc, #144]	; (8004abc <vTaskSwitchContext+0xa8>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a30:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <vTaskSwitchContext+0xac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	fab3 f383 	clz	r3, r3
 8004a3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a3e:	7afb      	ldrb	r3, [r7, #11]
 8004a40:	f1c3 031f 	rsb	r3, r3, #31
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	491f      	ldr	r1, [pc, #124]	; (8004ac4 <vTaskSwitchContext+0xb0>)
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vTaskSwitchContext+0x5a>
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <vTaskSwitchContext+0xb0>)
 8004a7c:	4413      	add	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3308      	adds	r3, #8
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d104      	bne.n	8004aa0 <vTaskSwitchContext+0x8c>
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <vTaskSwitchContext+0xb4>)
 8004aa8:	6013      	str	r3, [r2, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000824 	.word	0x20000824
 8004abc:	20000810 	.word	0x20000810
 8004ac0:	20000804 	.word	0x20000804
 8004ac4:	20000700 	.word	0x20000700
 8004ac8:	200006fc 	.word	0x200006fc

08004acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ad4:	f000 f852 	bl	8004b7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <prvIdleTask+0x28>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d9f9      	bls.n	8004ad4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <prvIdleTask+0x2c>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004af0:	e7f0      	b.n	8004ad4 <prvIdleTask+0x8>
 8004af2:	bf00      	nop
 8004af4:	20000700 	.word	0x20000700
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	e00c      	b.n	8004b22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <prvInitialiseTaskLists+0x60>)
 8004b14:	4413      	add	r3, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fb3f 	bl	800419a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d9ef      	bls.n	8004b08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <prvInitialiseTaskLists+0x64>)
 8004b2a:	f7ff fb36 	bl	800419a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b2e:	480d      	ldr	r0, [pc, #52]	; (8004b64 <prvInitialiseTaskLists+0x68>)
 8004b30:	f7ff fb33 	bl	800419a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b34:	480c      	ldr	r0, [pc, #48]	; (8004b68 <prvInitialiseTaskLists+0x6c>)
 8004b36:	f7ff fb30 	bl	800419a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b3a:	480c      	ldr	r0, [pc, #48]	; (8004b6c <prvInitialiseTaskLists+0x70>)
 8004b3c:	f7ff fb2d 	bl	800419a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b40:	480b      	ldr	r0, [pc, #44]	; (8004b70 <prvInitialiseTaskLists+0x74>)
 8004b42:	f7ff fb2a 	bl	800419a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <prvInitialiseTaskLists+0x78>)
 8004b48:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <prvInitialiseTaskLists+0x64>)
 8004b4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvInitialiseTaskLists+0x7c>)
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <prvInitialiseTaskLists+0x68>)
 8004b50:	601a      	str	r2, [r3, #0]
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000700 	.word	0x20000700
 8004b60:	2000078c 	.word	0x2000078c
 8004b64:	200007a0 	.word	0x200007a0
 8004b68:	200007bc 	.word	0x200007bc
 8004b6c:	200007d0 	.word	0x200007d0
 8004b70:	200007e8 	.word	0x200007e8
 8004b74:	200007b4 	.word	0x200007b4
 8004b78:	200007b8 	.word	0x200007b8

08004b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b82:	e019      	b.n	8004bb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b84:	f000 fa0e 	bl	8004fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <prvCheckTasksWaitingTermination+0x50>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fb8a 	bl	80042ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <prvCheckTasksWaitingTermination+0x54>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <prvCheckTasksWaitingTermination+0x54>)
 8004ba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004bac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bae:	f000 fa29 	bl	8005004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f810 	bl	8004bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e1      	bne.n	8004b84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200007d0 	.word	0x200007d0
 8004bd0:	200007fc 	.word	0x200007fc
 8004bd4:	200007e4 	.word	0x200007e4

08004bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fb86 	bl	8005300 <vPortFree>
				vPortFree( pxTCB );
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fb83 	bl	8005300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bfa:	e018      	b.n	8004c2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d103      	bne.n	8004c0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fb7a 	bl	8005300 <vPortFree>
	}
 8004c0c:	e00f      	b.n	8004c2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d00a      	beq.n	8004c2e <prvDeleteTCB+0x56>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <prvDeleteTCB+0x54>
	}
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <prvResetNextTaskUnblockTime+0x38>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <prvResetNextTaskUnblockTime+0x3c>)
 8004c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c50:	e008      	b.n	8004c64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <prvResetNextTaskUnblockTime+0x38>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <prvResetNextTaskUnblockTime+0x3c>)
 8004c62:	6013      	str	r3, [r2, #0]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	200007b4 	.word	0x200007b4
 8004c74:	2000081c 	.word	0x2000081c

08004c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c82:	4b29      	ldr	r3, [pc, #164]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c88:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fb0d 	bl	80042ae <uxListRemove>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c9a:	4b24      	ldr	r3, [pc, #144]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4013      	ands	r3, r2
 8004cae:	4a20      	ldr	r2, [pc, #128]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d10a      	bne.n	8004cd0 <prvAddCurrentTaskToDelayedList+0x58>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	481a      	ldr	r0, [pc, #104]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cca:	f7ff fa93 	bl	80041f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cce:	e026      	b.n	8004d1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d209      	bcs.n	8004cfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f7ff faa1 	bl	800423c <vListInsert>
}
 8004cfa:	e010      	b.n	8004d1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f7ff fa97 	bl	800423c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d202      	bcs.n	8004d1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000800 	.word	0x20000800
 8004d2c:	200006fc 	.word	0x200006fc
 8004d30:	20000804 	.word	0x20000804
 8004d34:	200007e8 	.word	0x200007e8
 8004d38:	200007b8 	.word	0x200007b8
 8004d3c:	200007b4 	.word	0x200007b4
 8004d40:	2000081c 	.word	0x2000081c

08004d44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3b04      	subs	r3, #4
 8004d54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b04      	subs	r3, #4
 8004d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3b04      	subs	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d74:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <pxPortInitialiseStack+0x64>)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b14      	subs	r3, #20
 8004d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f06f 0202 	mvn.w	r2, #2
 8004d92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3b20      	subs	r3, #32
 8004d98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	08004dad 	.word	0x08004dad

08004dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <prvTaskExitError+0x54>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d00a      	beq.n	8004dd6 <prvTaskExitError+0x2a>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <prvTaskExitError+0x28>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	60bb      	str	r3, [r7, #8]
}
 8004de8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dea:	bf00      	nop
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0fc      	beq.n	8004dec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000014 	.word	0x20000014
	...

08004e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <pxCurrentTCBConst2>)
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1a:	f380 8809 	msr	PSP, r0
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	4770      	bx	lr
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst2>:
 8004e30:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e38:	4808      	ldr	r0, [pc, #32]	; (8004e5c <prvPortStartFirstTask+0x24>)
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	6800      	ldr	r0, [r0, #0]
 8004e3e:	f380 8808 	msr	MSP, r0
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8814 	msr	CONTROL, r0
 8004e4a:	b662      	cpsie	i
 8004e4c:	b661      	cpsie	f
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	df00      	svc	0
 8004e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e5a:	bf00      	nop
 8004e5c:	e000ed08 	.word	0xe000ed08

08004e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e66:	4b46      	ldr	r3, [pc, #280]	; (8004f80 <xPortStartScheduler+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a46      	ldr	r2, [pc, #280]	; (8004f84 <xPortStartScheduler+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10a      	bne.n	8004e86 <xPortStartScheduler+0x26>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e86:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <xPortStartScheduler+0x120>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <xPortStartScheduler+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10a      	bne.n	8004ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ea6:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	22ff      	movs	r2, #255	; 0xff
 8004eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <xPortStartScheduler+0x130>)
 8004ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ed4:	e009      	b.n	8004eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	4a2d      	ldr	r2, [pc, #180]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d0ef      	beq.n	8004ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1c3 0307 	rsb	r3, r3, #7
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d00a      	beq.n	8004f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60bb      	str	r3, [r7, #8]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f22:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f2a:	4a1a      	ldr	r2, [pc, #104]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f4e:	f000 f8dd 	bl	800510c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <xPortStartScheduler+0x13c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f58:	f000 f8fc 	bl	8005154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <xPortStartScheduler+0x140>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <xPortStartScheduler+0x140>)
 8004f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f68:	f7ff ff66 	bl	8004e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f6c:	f7ff fd52 	bl	8004a14 <vTaskSwitchContext>
	prvTaskExitError();
 8004f70:	f7ff ff1c 	bl	8004dac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000ed00 	.word	0xe000ed00
 8004f84:	410fc271 	.word	0x410fc271
 8004f88:	410fc270 	.word	0x410fc270
 8004f8c:	e000e400 	.word	0xe000e400
 8004f90:	20000828 	.word	0x20000828
 8004f94:	2000082c 	.word	0x2000082c
 8004f98:	e000ed20 	.word	0xe000ed20
 8004f9c:	20000014 	.word	0x20000014
 8004fa0:	e000ef34 	.word	0xe000ef34

08004fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
}
 8004fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <vPortEnterCritical+0x58>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <vPortEnterCritical+0x58>)
 8004fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <vPortEnterCritical+0x58>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10f      	bne.n	8004ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <vPortEnterCritical+0x5c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	603b      	str	r3, [r7, #0]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <vPortEnterCritical+0x4a>
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000014 	.word	0x20000014
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <vPortExitCritical+0x50>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <vPortExitCritical+0x24>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	607b      	str	r3, [r7, #4]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <vPortExitCritical+0x50>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3b01      	subs	r3, #1
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <vPortExitCritical+0x50>)
 8005030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <vPortExitCritical+0x50>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <vPortExitCritical+0x42>
 800503a:	2300      	movs	r3, #0
 800503c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000014 	.word	0x20000014
	...

08005060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005060:	f3ef 8009 	mrs	r0, PSP
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <pxCurrentTCBConst>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	f01e 0f10 	tst.w	lr, #16
 8005070:	bf08      	it	eq
 8005072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005084:	f380 8811 	msr	BASEPRI, r0
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f7ff fcc0 	bl	8004a14 <vTaskSwitchContext>
 8005094:	f04f 0000 	mov.w	r0, #0
 8005098:	f380 8811 	msr	BASEPRI, r0
 800509c:	bc09      	pop	{r0, r3}
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	6808      	ldr	r0, [r1, #0]
 80050a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a6:	f01e 0f10 	tst.w	lr, #16
 80050aa:	bf08      	it	eq
 80050ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050b0:	f380 8809 	msr	PSP, r0
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w

080050c0 <pxCurrentTCBConst>:
 80050c0:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop

080050c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
}
 80050e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050e2:	f7ff fbdf 	bl	80048a4 <xTaskIncrementTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <SysTick_Handler+0x40>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f383 8811 	msr	BASEPRI, r3
}
 80050fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <vPortSetupTimerInterrupt+0x34>)
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <vPortSetupTimerInterrupt+0x38>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <vPortSetupTimerInterrupt+0x3c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <vPortSetupTimerInterrupt+0x40>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	4a09      	ldr	r2, [pc, #36]	; (8005150 <vPortSetupTimerInterrupt+0x44>)
 800512a:	3b01      	subs	r3, #1
 800512c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <vPortSetupTimerInterrupt+0x34>)
 8005130:	2207      	movs	r2, #7
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	e000e010 	.word	0xe000e010
 8005144:	e000e018 	.word	0xe000e018
 8005148:	20000008 	.word	0x20000008
 800514c:	10624dd3 	.word	0x10624dd3
 8005150:	e000e014 	.word	0xe000e014

08005154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005164 <vPortEnableVFP+0x10>
 8005158:	6801      	ldr	r1, [r0, #0]
 800515a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800515e:	6001      	str	r1, [r0, #0]
 8005160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005162:	bf00      	nop
 8005164:	e000ed88 	.word	0xe000ed88

08005168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005174:	f7ff faec 	bl	8004750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005178:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <pvPortMalloc+0x180>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005180:	f000 f920 	bl	80053c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <pvPortMalloc+0x184>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8093 	bne.w	80052b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01d      	beq.n	80051d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005198:	2208      	movs	r2, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d014      	beq.n	80051d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f023 0307 	bic.w	r3, r3, #7
 80051b0:	3308      	adds	r3, #8
 80051b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <pvPortMalloc+0x6c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06e      	beq.n	80052b8 <pvPortMalloc+0x150>
 80051da:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <pvPortMalloc+0x188>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d869      	bhi.n	80052b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051e4:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <pvPortMalloc+0x18c>)
 80051e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <pvPortMalloc+0x18c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ee:	e004      	b.n	80051fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <pvPortMalloc+0xa4>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <pvPortMalloc+0x180>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	429a      	cmp	r2, r3
 8005214:	d050      	beq.n	80052b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2208      	movs	r2, #8
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	2308      	movs	r3, #8
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	429a      	cmp	r2, r3
 8005236:	d91f      	bls.n	8005278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <pvPortMalloc+0xf8>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	613b      	str	r3, [r7, #16]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005272:	69b8      	ldr	r0, [r7, #24]
 8005274:	f000 f908 	bl	8005488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <pvPortMalloc+0x188>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <pvPortMalloc+0x188>)
 8005284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <pvPortMalloc+0x188>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <pvPortMalloc+0x190>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d203      	bcs.n	800529a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <pvPortMalloc+0x188>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <pvPortMalloc+0x190>)
 8005298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <pvPortMalloc+0x184>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <pvPortMalloc+0x194>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <pvPortMalloc+0x194>)
 80052b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052b8:	f7ff fa58 	bl	800476c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <pvPortMalloc+0x174>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvPortMalloc+0x172>
	return pvReturn;
 80052dc:	69fb      	ldr	r3, [r7, #28]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20004438 	.word	0x20004438
 80052ec:	2000444c 	.word	0x2000444c
 80052f0:	2000443c 	.word	0x2000443c
 80052f4:	20004430 	.word	0x20004430
 80052f8:	20004440 	.word	0x20004440
 80052fc:	20004444 	.word	0x20004444

08005300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04d      	beq.n	80053ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005312:	2308      	movs	r3, #8
 8005314:	425b      	negs	r3, r3
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <vPortFree+0xb8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <vPortFree+0x44>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <vPortFree+0x62>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60bb      	str	r3, [r7, #8]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <vPortFree+0xb8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01e      	beq.n	80053ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11a      	bne.n	80053ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortFree+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	43db      	mvns	r3, r3
 8005382:	401a      	ands	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005388:	f7ff f9e2 	bl	8004750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <vPortFree+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4413      	add	r3, r2
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <vPortFree+0xbc>)
 8005398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800539a:	6938      	ldr	r0, [r7, #16]
 800539c:	f000 f874 	bl	8005488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <vPortFree+0xc0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <vPortFree+0xc0>)
 80053a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053aa:	f7ff f9df 	bl	800476c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	2000444c 	.word	0x2000444c
 80053bc:	2000443c 	.word	0x2000443c
 80053c0:	20004448 	.word	0x20004448

080053c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <prvHeapInit+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3307      	adds	r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <prvHeapInit+0xac>)
 80053f4:	4413      	add	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <prvHeapInit+0xb0>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <prvHeapInit+0xb0>)
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005410:	2208      	movs	r2, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <prvHeapInit+0xb4>)
 8005424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvHeapInit+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <prvHeapInit+0xb4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvHeapInit+0xb4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <prvHeapInit+0xb8>)
 8005452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <prvHeapInit+0xbc>)
 800545a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <prvHeapInit+0xc0>)
 800545e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000830 	.word	0x20000830
 8005474:	20004430 	.word	0x20004430
 8005478:	20004438 	.word	0x20004438
 800547c:	20004440 	.word	0x20004440
 8005480:	2000443c 	.word	0x2000443c
 8005484:	2000444c 	.word	0x2000444c

08005488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <prvInsertBlockIntoFreeList+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <prvInsertBlockIntoFreeList+0x14>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d8f7      	bhi.n	8005496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d108      	bne.n	80054ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d118      	bne.n	8005510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d00d      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e008      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e003      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d002      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20004430 	.word	0x20004430
 8005538:	20004438 	.word	0x20004438

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000018 	.word	0x20000018

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4d0d      	ldr	r5, [pc, #52]	; (8005580 <__libc_init_array+0x38>)
 800554c:	4c0d      	ldr	r4, [pc, #52]	; (8005584 <__libc_init_array+0x3c>)
 800554e:	1b64      	subs	r4, r4, r5
 8005550:	10a4      	asrs	r4, r4, #2
 8005552:	2600      	movs	r6, #0
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	4d0b      	ldr	r5, [pc, #44]	; (8005588 <__libc_init_array+0x40>)
 800555a:	4c0c      	ldr	r4, [pc, #48]	; (800558c <__libc_init_array+0x44>)
 800555c:	f000 fc4e 	bl	8005dfc <_init>
 8005560:	1b64      	subs	r4, r4, r5
 8005562:	10a4      	asrs	r4, r4, #2
 8005564:	2600      	movs	r6, #0
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	f855 3b04 	ldr.w	r3, [r5], #4
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08006c7c 	.word	0x08006c7c
 8005584:	08006c7c 	.word	0x08006c7c
 8005588:	08006c7c 	.word	0x08006c7c
 800558c:	08006c80 	.word	0x08006c80

08005590 <memcpy>:
 8005590:	440a      	add	r2, r1
 8005592:	4291      	cmp	r1, r2
 8005594:	f100 33ff 	add.w	r3, r0, #4294967295
 8005598:	d100      	bne.n	800559c <memcpy+0xc>
 800559a:	4770      	bx	lr
 800559c:	b510      	push	{r4, lr}
 800559e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a6:	4291      	cmp	r1, r2
 80055a8:	d1f9      	bne.n	800559e <memcpy+0xe>
 80055aa:	bd10      	pop	{r4, pc}

080055ac <memset>:
 80055ac:	4402      	add	r2, r0
 80055ae:	4603      	mov	r3, r0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d100      	bne.n	80055b6 <memset+0xa>
 80055b4:	4770      	bx	lr
 80055b6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ba:	e7f9      	b.n	80055b0 <memset+0x4>

080055bc <siprintf>:
 80055bc:	b40e      	push	{r1, r2, r3}
 80055be:	b500      	push	{lr}
 80055c0:	b09c      	sub	sp, #112	; 0x70
 80055c2:	ab1d      	add	r3, sp, #116	; 0x74
 80055c4:	9002      	str	r0, [sp, #8]
 80055c6:	9006      	str	r0, [sp, #24]
 80055c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055cc:	4809      	ldr	r0, [pc, #36]	; (80055f4 <siprintf+0x38>)
 80055ce:	9107      	str	r1, [sp, #28]
 80055d0:	9104      	str	r1, [sp, #16]
 80055d2:	4909      	ldr	r1, [pc, #36]	; (80055f8 <siprintf+0x3c>)
 80055d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d8:	9105      	str	r1, [sp, #20]
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	a902      	add	r1, sp, #8
 80055e0:	f000 f868 	bl	80056b4 <_svfiprintf_r>
 80055e4:	9b02      	ldr	r3, [sp, #8]
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	b01c      	add	sp, #112	; 0x70
 80055ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f0:	b003      	add	sp, #12
 80055f2:	4770      	bx	lr
 80055f4:	20000018 	.word	0x20000018
 80055f8:	ffff0208 	.word	0xffff0208

080055fc <__ssputs_r>:
 80055fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005600:	688e      	ldr	r6, [r1, #8]
 8005602:	429e      	cmp	r6, r3
 8005604:	4682      	mov	sl, r0
 8005606:	460c      	mov	r4, r1
 8005608:	4690      	mov	r8, r2
 800560a:	461f      	mov	r7, r3
 800560c:	d838      	bhi.n	8005680 <__ssputs_r+0x84>
 800560e:	898a      	ldrh	r2, [r1, #12]
 8005610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005614:	d032      	beq.n	800567c <__ssputs_r+0x80>
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	6909      	ldr	r1, [r1, #16]
 800561a:	eba5 0901 	sub.w	r9, r5, r1
 800561e:	6965      	ldr	r5, [r4, #20]
 8005620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005628:	3301      	adds	r3, #1
 800562a:	444b      	add	r3, r9
 800562c:	106d      	asrs	r5, r5, #1
 800562e:	429d      	cmp	r5, r3
 8005630:	bf38      	it	cc
 8005632:	461d      	movcc	r5, r3
 8005634:	0553      	lsls	r3, r2, #21
 8005636:	d531      	bpl.n	800569c <__ssputs_r+0xa0>
 8005638:	4629      	mov	r1, r5
 800563a:	f000 fb39 	bl	8005cb0 <_malloc_r>
 800563e:	4606      	mov	r6, r0
 8005640:	b950      	cbnz	r0, 8005658 <__ssputs_r+0x5c>
 8005642:	230c      	movs	r3, #12
 8005644:	f8ca 3000 	str.w	r3, [sl]
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	6921      	ldr	r1, [r4, #16]
 800565a:	464a      	mov	r2, r9
 800565c:	f7ff ff98 	bl	8005590 <memcpy>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	6126      	str	r6, [r4, #16]
 800566e:	6165      	str	r5, [r4, #20]
 8005670:	444e      	add	r6, r9
 8005672:	eba5 0509 	sub.w	r5, r5, r9
 8005676:	6026      	str	r6, [r4, #0]
 8005678:	60a5      	str	r5, [r4, #8]
 800567a:	463e      	mov	r6, r7
 800567c:	42be      	cmp	r6, r7
 800567e:	d900      	bls.n	8005682 <__ssputs_r+0x86>
 8005680:	463e      	mov	r6, r7
 8005682:	4632      	mov	r2, r6
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	4641      	mov	r1, r8
 8005688:	f000 faa8 	bl	8005bdc <memmove>
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	6822      	ldr	r2, [r4, #0]
 8005690:	1b9b      	subs	r3, r3, r6
 8005692:	4432      	add	r2, r6
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	6022      	str	r2, [r4, #0]
 8005698:	2000      	movs	r0, #0
 800569a:	e7db      	b.n	8005654 <__ssputs_r+0x58>
 800569c:	462a      	mov	r2, r5
 800569e:	f000 fb61 	bl	8005d64 <_realloc_r>
 80056a2:	4606      	mov	r6, r0
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d1e1      	bne.n	800566c <__ssputs_r+0x70>
 80056a8:	6921      	ldr	r1, [r4, #16]
 80056aa:	4650      	mov	r0, sl
 80056ac:	f000 fab0 	bl	8005c10 <_free_r>
 80056b0:	e7c7      	b.n	8005642 <__ssputs_r+0x46>
	...

080056b4 <_svfiprintf_r>:
 80056b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b8:	4698      	mov	r8, r3
 80056ba:	898b      	ldrh	r3, [r1, #12]
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	b09d      	sub	sp, #116	; 0x74
 80056c0:	4607      	mov	r7, r0
 80056c2:	460d      	mov	r5, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	d50e      	bpl.n	80056e6 <_svfiprintf_r+0x32>
 80056c8:	690b      	ldr	r3, [r1, #16]
 80056ca:	b963      	cbnz	r3, 80056e6 <_svfiprintf_r+0x32>
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	f000 faef 	bl	8005cb0 <_malloc_r>
 80056d2:	6028      	str	r0, [r5, #0]
 80056d4:	6128      	str	r0, [r5, #16]
 80056d6:	b920      	cbnz	r0, 80056e2 <_svfiprintf_r+0x2e>
 80056d8:	230c      	movs	r3, #12
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e0d1      	b.n	8005886 <_svfiprintf_r+0x1d2>
 80056e2:	2340      	movs	r3, #64	; 0x40
 80056e4:	616b      	str	r3, [r5, #20]
 80056e6:	2300      	movs	r3, #0
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	2320      	movs	r3, #32
 80056ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056f4:	2330      	movs	r3, #48	; 0x30
 80056f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058a0 <_svfiprintf_r+0x1ec>
 80056fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056fe:	f04f 0901 	mov.w	r9, #1
 8005702:	4623      	mov	r3, r4
 8005704:	469a      	mov	sl, r3
 8005706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800570a:	b10a      	cbz	r2, 8005710 <_svfiprintf_r+0x5c>
 800570c:	2a25      	cmp	r2, #37	; 0x25
 800570e:	d1f9      	bne.n	8005704 <_svfiprintf_r+0x50>
 8005710:	ebba 0b04 	subs.w	fp, sl, r4
 8005714:	d00b      	beq.n	800572e <_svfiprintf_r+0x7a>
 8005716:	465b      	mov	r3, fp
 8005718:	4622      	mov	r2, r4
 800571a:	4629      	mov	r1, r5
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ff6d 	bl	80055fc <__ssputs_r>
 8005722:	3001      	adds	r0, #1
 8005724:	f000 80aa 	beq.w	800587c <_svfiprintf_r+0x1c8>
 8005728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572a:	445a      	add	r2, fp
 800572c:	9209      	str	r2, [sp, #36]	; 0x24
 800572e:	f89a 3000 	ldrb.w	r3, [sl]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80a2 	beq.w	800587c <_svfiprintf_r+0x1c8>
 8005738:	2300      	movs	r3, #0
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005742:	f10a 0a01 	add.w	sl, sl, #1
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	9307      	str	r3, [sp, #28]
 800574a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800574e:	931a      	str	r3, [sp, #104]	; 0x68
 8005750:	4654      	mov	r4, sl
 8005752:	2205      	movs	r2, #5
 8005754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005758:	4851      	ldr	r0, [pc, #324]	; (80058a0 <_svfiprintf_r+0x1ec>)
 800575a:	f7fa fd59 	bl	8000210 <memchr>
 800575e:	9a04      	ldr	r2, [sp, #16]
 8005760:	b9d8      	cbnz	r0, 800579a <_svfiprintf_r+0xe6>
 8005762:	06d0      	lsls	r0, r2, #27
 8005764:	bf44      	itt	mi
 8005766:	2320      	movmi	r3, #32
 8005768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576c:	0711      	lsls	r1, r2, #28
 800576e:	bf44      	itt	mi
 8005770:	232b      	movmi	r3, #43	; 0x2b
 8005772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005776:	f89a 3000 	ldrb.w	r3, [sl]
 800577a:	2b2a      	cmp	r3, #42	; 0x2a
 800577c:	d015      	beq.n	80057aa <_svfiprintf_r+0xf6>
 800577e:	9a07      	ldr	r2, [sp, #28]
 8005780:	4654      	mov	r4, sl
 8005782:	2000      	movs	r0, #0
 8005784:	f04f 0c0a 	mov.w	ip, #10
 8005788:	4621      	mov	r1, r4
 800578a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800578e:	3b30      	subs	r3, #48	; 0x30
 8005790:	2b09      	cmp	r3, #9
 8005792:	d94e      	bls.n	8005832 <_svfiprintf_r+0x17e>
 8005794:	b1b0      	cbz	r0, 80057c4 <_svfiprintf_r+0x110>
 8005796:	9207      	str	r2, [sp, #28]
 8005798:	e014      	b.n	80057c4 <_svfiprintf_r+0x110>
 800579a:	eba0 0308 	sub.w	r3, r0, r8
 800579e:	fa09 f303 	lsl.w	r3, r9, r3
 80057a2:	4313      	orrs	r3, r2
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	46a2      	mov	sl, r4
 80057a8:	e7d2      	b.n	8005750 <_svfiprintf_r+0x9c>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	1d19      	adds	r1, r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	9103      	str	r1, [sp, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bfbb      	ittet	lt
 80057b6:	425b      	neglt	r3, r3
 80057b8:	f042 0202 	orrlt.w	r2, r2, #2
 80057bc:	9307      	strge	r3, [sp, #28]
 80057be:	9307      	strlt	r3, [sp, #28]
 80057c0:	bfb8      	it	lt
 80057c2:	9204      	strlt	r2, [sp, #16]
 80057c4:	7823      	ldrb	r3, [r4, #0]
 80057c6:	2b2e      	cmp	r3, #46	; 0x2e
 80057c8:	d10c      	bne.n	80057e4 <_svfiprintf_r+0x130>
 80057ca:	7863      	ldrb	r3, [r4, #1]
 80057cc:	2b2a      	cmp	r3, #42	; 0x2a
 80057ce:	d135      	bne.n	800583c <_svfiprintf_r+0x188>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	1d1a      	adds	r2, r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	9203      	str	r2, [sp, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfb8      	it	lt
 80057dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80057e0:	3402      	adds	r4, #2
 80057e2:	9305      	str	r3, [sp, #20]
 80057e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80058b0 <_svfiprintf_r+0x1fc>
 80057e8:	7821      	ldrb	r1, [r4, #0]
 80057ea:	2203      	movs	r2, #3
 80057ec:	4650      	mov	r0, sl
 80057ee:	f7fa fd0f 	bl	8000210 <memchr>
 80057f2:	b140      	cbz	r0, 8005806 <_svfiprintf_r+0x152>
 80057f4:	2340      	movs	r3, #64	; 0x40
 80057f6:	eba0 000a 	sub.w	r0, r0, sl
 80057fa:	fa03 f000 	lsl.w	r0, r3, r0
 80057fe:	9b04      	ldr	r3, [sp, #16]
 8005800:	4303      	orrs	r3, r0
 8005802:	3401      	adds	r4, #1
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800580a:	4826      	ldr	r0, [pc, #152]	; (80058a4 <_svfiprintf_r+0x1f0>)
 800580c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005810:	2206      	movs	r2, #6
 8005812:	f7fa fcfd 	bl	8000210 <memchr>
 8005816:	2800      	cmp	r0, #0
 8005818:	d038      	beq.n	800588c <_svfiprintf_r+0x1d8>
 800581a:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <_svfiprintf_r+0x1f4>)
 800581c:	bb1b      	cbnz	r3, 8005866 <_svfiprintf_r+0x1b2>
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	3307      	adds	r3, #7
 8005822:	f023 0307 	bic.w	r3, r3, #7
 8005826:	3308      	adds	r3, #8
 8005828:	9303      	str	r3, [sp, #12]
 800582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582c:	4433      	add	r3, r6
 800582e:	9309      	str	r3, [sp, #36]	; 0x24
 8005830:	e767      	b.n	8005702 <_svfiprintf_r+0x4e>
 8005832:	fb0c 3202 	mla	r2, ip, r2, r3
 8005836:	460c      	mov	r4, r1
 8005838:	2001      	movs	r0, #1
 800583a:	e7a5      	b.n	8005788 <_svfiprintf_r+0xd4>
 800583c:	2300      	movs	r3, #0
 800583e:	3401      	adds	r4, #1
 8005840:	9305      	str	r3, [sp, #20]
 8005842:	4619      	mov	r1, r3
 8005844:	f04f 0c0a 	mov.w	ip, #10
 8005848:	4620      	mov	r0, r4
 800584a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800584e:	3a30      	subs	r2, #48	; 0x30
 8005850:	2a09      	cmp	r2, #9
 8005852:	d903      	bls.n	800585c <_svfiprintf_r+0x1a8>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0c5      	beq.n	80057e4 <_svfiprintf_r+0x130>
 8005858:	9105      	str	r1, [sp, #20]
 800585a:	e7c3      	b.n	80057e4 <_svfiprintf_r+0x130>
 800585c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005860:	4604      	mov	r4, r0
 8005862:	2301      	movs	r3, #1
 8005864:	e7f0      	b.n	8005848 <_svfiprintf_r+0x194>
 8005866:	ab03      	add	r3, sp, #12
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	462a      	mov	r2, r5
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <_svfiprintf_r+0x1f8>)
 800586e:	a904      	add	r1, sp, #16
 8005870:	4638      	mov	r0, r7
 8005872:	f3af 8000 	nop.w
 8005876:	1c42      	adds	r2, r0, #1
 8005878:	4606      	mov	r6, r0
 800587a:	d1d6      	bne.n	800582a <_svfiprintf_r+0x176>
 800587c:	89ab      	ldrh	r3, [r5, #12]
 800587e:	065b      	lsls	r3, r3, #25
 8005880:	f53f af2c 	bmi.w	80056dc <_svfiprintf_r+0x28>
 8005884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005886:	b01d      	add	sp, #116	; 0x74
 8005888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588c:	ab03      	add	r3, sp, #12
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	462a      	mov	r2, r5
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <_svfiprintf_r+0x1f8>)
 8005894:	a904      	add	r1, sp, #16
 8005896:	4638      	mov	r0, r7
 8005898:	f000 f87a 	bl	8005990 <_printf_i>
 800589c:	e7eb      	b.n	8005876 <_svfiprintf_r+0x1c2>
 800589e:	bf00      	nop
 80058a0:	08006c40 	.word	0x08006c40
 80058a4:	08006c4a 	.word	0x08006c4a
 80058a8:	00000000 	.word	0x00000000
 80058ac:	080055fd 	.word	0x080055fd
 80058b0:	08006c46 	.word	0x08006c46

080058b4 <_printf_common>:
 80058b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	4616      	mov	r6, r2
 80058ba:	4699      	mov	r9, r3
 80058bc:	688a      	ldr	r2, [r1, #8]
 80058be:	690b      	ldr	r3, [r1, #16]
 80058c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bfb8      	it	lt
 80058c8:	4613      	movlt	r3, r2
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058d0:	4607      	mov	r7, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b10a      	cbz	r2, 80058da <_printf_common+0x26>
 80058d6:	3301      	adds	r3, #1
 80058d8:	6033      	str	r3, [r6, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	0699      	lsls	r1, r3, #26
 80058de:	bf42      	ittt	mi
 80058e0:	6833      	ldrmi	r3, [r6, #0]
 80058e2:	3302      	addmi	r3, #2
 80058e4:	6033      	strmi	r3, [r6, #0]
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	f015 0506 	ands.w	r5, r5, #6
 80058ec:	d106      	bne.n	80058fc <_printf_common+0x48>
 80058ee:	f104 0a19 	add.w	sl, r4, #25
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	6832      	ldr	r2, [r6, #0]
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dc26      	bgt.n	800594a <_printf_common+0x96>
 80058fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005900:	1e13      	subs	r3, r2, #0
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	bf18      	it	ne
 8005906:	2301      	movne	r3, #1
 8005908:	0692      	lsls	r2, r2, #26
 800590a:	d42b      	bmi.n	8005964 <_printf_common+0xb0>
 800590c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005910:	4649      	mov	r1, r9
 8005912:	4638      	mov	r0, r7
 8005914:	47c0      	blx	r8
 8005916:	3001      	adds	r0, #1
 8005918:	d01e      	beq.n	8005958 <_printf_common+0xa4>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	68e5      	ldr	r5, [r4, #12]
 800591e:	6832      	ldr	r2, [r6, #0]
 8005920:	f003 0306 	and.w	r3, r3, #6
 8005924:	2b04      	cmp	r3, #4
 8005926:	bf08      	it	eq
 8005928:	1aad      	subeq	r5, r5, r2
 800592a:	68a3      	ldr	r3, [r4, #8]
 800592c:	6922      	ldr	r2, [r4, #16]
 800592e:	bf0c      	ite	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	2500      	movne	r5, #0
 8005936:	4293      	cmp	r3, r2
 8005938:	bfc4      	itt	gt
 800593a:	1a9b      	subgt	r3, r3, r2
 800593c:	18ed      	addgt	r5, r5, r3
 800593e:	2600      	movs	r6, #0
 8005940:	341a      	adds	r4, #26
 8005942:	42b5      	cmp	r5, r6
 8005944:	d11a      	bne.n	800597c <_printf_common+0xc8>
 8005946:	2000      	movs	r0, #0
 8005948:	e008      	b.n	800595c <_printf_common+0xa8>
 800594a:	2301      	movs	r3, #1
 800594c:	4652      	mov	r2, sl
 800594e:	4649      	mov	r1, r9
 8005950:	4638      	mov	r0, r7
 8005952:	47c0      	blx	r8
 8005954:	3001      	adds	r0, #1
 8005956:	d103      	bne.n	8005960 <_printf_common+0xac>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	3501      	adds	r5, #1
 8005962:	e7c6      	b.n	80058f2 <_printf_common+0x3e>
 8005964:	18e1      	adds	r1, r4, r3
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	2030      	movs	r0, #48	; 0x30
 800596a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800596e:	4422      	add	r2, r4
 8005970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005978:	3302      	adds	r3, #2
 800597a:	e7c7      	b.n	800590c <_printf_common+0x58>
 800597c:	2301      	movs	r3, #1
 800597e:	4622      	mov	r2, r4
 8005980:	4649      	mov	r1, r9
 8005982:	4638      	mov	r0, r7
 8005984:	47c0      	blx	r8
 8005986:	3001      	adds	r0, #1
 8005988:	d0e6      	beq.n	8005958 <_printf_common+0xa4>
 800598a:	3601      	adds	r6, #1
 800598c:	e7d9      	b.n	8005942 <_printf_common+0x8e>
	...

08005990 <_printf_i>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	460c      	mov	r4, r1
 8005996:	4691      	mov	r9, r2
 8005998:	7e27      	ldrb	r7, [r4, #24]
 800599a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800599c:	2f78      	cmp	r7, #120	; 0x78
 800599e:	4680      	mov	r8, r0
 80059a0:	469a      	mov	sl, r3
 80059a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a6:	d807      	bhi.n	80059b8 <_printf_i+0x28>
 80059a8:	2f62      	cmp	r7, #98	; 0x62
 80059aa:	d80a      	bhi.n	80059c2 <_printf_i+0x32>
 80059ac:	2f00      	cmp	r7, #0
 80059ae:	f000 80d8 	beq.w	8005b62 <_printf_i+0x1d2>
 80059b2:	2f58      	cmp	r7, #88	; 0x58
 80059b4:	f000 80a3 	beq.w	8005afe <_printf_i+0x16e>
 80059b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059c0:	e03a      	b.n	8005a38 <_printf_i+0xa8>
 80059c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059c6:	2b15      	cmp	r3, #21
 80059c8:	d8f6      	bhi.n	80059b8 <_printf_i+0x28>
 80059ca:	a001      	add	r0, pc, #4	; (adr r0, 80059d0 <_printf_i+0x40>)
 80059cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059d0:	08005a29 	.word	0x08005a29
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	080059b9 	.word	0x080059b9
 80059dc:	080059b9 	.word	0x080059b9
 80059e0:	080059b9 	.word	0x080059b9
 80059e4:	080059b9 	.word	0x080059b9
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	080059b9 	.word	0x080059b9
 80059f0:	080059b9 	.word	0x080059b9
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	08005b49 	.word	0x08005b49
 8005a00:	08005a6d 	.word	0x08005a6d
 8005a04:	08005b2b 	.word	0x08005b2b
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b6b 	.word	0x08005b6b
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	08005a6d 	.word	0x08005a6d
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005b33 	.word	0x08005b33
 8005a28:	680b      	ldr	r3, [r1, #0]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	600a      	str	r2, [r1, #0]
 8005a30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0a3      	b.n	8005b84 <_printf_i+0x1f4>
 8005a3c:	6825      	ldr	r5, [r4, #0]
 8005a3e:	6808      	ldr	r0, [r1, #0]
 8005a40:	062e      	lsls	r6, r5, #24
 8005a42:	f100 0304 	add.w	r3, r0, #4
 8005a46:	d50a      	bpl.n	8005a5e <_printf_i+0xce>
 8005a48:	6805      	ldr	r5, [r0, #0]
 8005a4a:	600b      	str	r3, [r1, #0]
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	da03      	bge.n	8005a58 <_printf_i+0xc8>
 8005a50:	232d      	movs	r3, #45	; 0x2d
 8005a52:	426d      	negs	r5, r5
 8005a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a58:	485e      	ldr	r0, [pc, #376]	; (8005bd4 <_printf_i+0x244>)
 8005a5a:	230a      	movs	r3, #10
 8005a5c:	e019      	b.n	8005a92 <_printf_i+0x102>
 8005a5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a62:	6805      	ldr	r5, [r0, #0]
 8005a64:	600b      	str	r3, [r1, #0]
 8005a66:	bf18      	it	ne
 8005a68:	b22d      	sxthne	r5, r5
 8005a6a:	e7ef      	b.n	8005a4c <_printf_i+0xbc>
 8005a6c:	680b      	ldr	r3, [r1, #0]
 8005a6e:	6825      	ldr	r5, [r4, #0]
 8005a70:	1d18      	adds	r0, r3, #4
 8005a72:	6008      	str	r0, [r1, #0]
 8005a74:	0628      	lsls	r0, r5, #24
 8005a76:	d501      	bpl.n	8005a7c <_printf_i+0xec>
 8005a78:	681d      	ldr	r5, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <_printf_i+0xf2>
 8005a7c:	0669      	lsls	r1, r5, #25
 8005a7e:	d5fb      	bpl.n	8005a78 <_printf_i+0xe8>
 8005a80:	881d      	ldrh	r5, [r3, #0]
 8005a82:	4854      	ldr	r0, [pc, #336]	; (8005bd4 <_printf_i+0x244>)
 8005a84:	2f6f      	cmp	r7, #111	; 0x6f
 8005a86:	bf0c      	ite	eq
 8005a88:	2308      	moveq	r3, #8
 8005a8a:	230a      	movne	r3, #10
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a92:	6866      	ldr	r6, [r4, #4]
 8005a94:	60a6      	str	r6, [r4, #8]
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	bfa2      	ittt	ge
 8005a9a:	6821      	ldrge	r1, [r4, #0]
 8005a9c:	f021 0104 	bicge.w	r1, r1, #4
 8005aa0:	6021      	strge	r1, [r4, #0]
 8005aa2:	b90d      	cbnz	r5, 8005aa8 <_printf_i+0x118>
 8005aa4:	2e00      	cmp	r6, #0
 8005aa6:	d04d      	beq.n	8005b44 <_printf_i+0x1b4>
 8005aa8:	4616      	mov	r6, r2
 8005aaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aae:	fb03 5711 	mls	r7, r3, r1, r5
 8005ab2:	5dc7      	ldrb	r7, [r0, r7]
 8005ab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ab8:	462f      	mov	r7, r5
 8005aba:	42bb      	cmp	r3, r7
 8005abc:	460d      	mov	r5, r1
 8005abe:	d9f4      	bls.n	8005aaa <_printf_i+0x11a>
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d10b      	bne.n	8005adc <_printf_i+0x14c>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07df      	lsls	r7, r3, #31
 8005ac8:	d508      	bpl.n	8005adc <_printf_i+0x14c>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	6861      	ldr	r1, [r4, #4]
 8005ace:	4299      	cmp	r1, r3
 8005ad0:	bfde      	ittt	le
 8005ad2:	2330      	movle	r3, #48	; 0x30
 8005ad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005adc:	1b92      	subs	r2, r2, r6
 8005ade:	6122      	str	r2, [r4, #16]
 8005ae0:	f8cd a000 	str.w	sl, [sp]
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	aa03      	add	r2, sp, #12
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4640      	mov	r0, r8
 8005aec:	f7ff fee2 	bl	80058b4 <_printf_common>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d14c      	bne.n	8005b8e <_printf_i+0x1fe>
 8005af4:	f04f 30ff 	mov.w	r0, #4294967295
 8005af8:	b004      	add	sp, #16
 8005afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afe:	4835      	ldr	r0, [pc, #212]	; (8005bd4 <_printf_i+0x244>)
 8005b00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	680e      	ldr	r6, [r1, #0]
 8005b08:	061f      	lsls	r7, r3, #24
 8005b0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b0e:	600e      	str	r6, [r1, #0]
 8005b10:	d514      	bpl.n	8005b3c <_printf_i+0x1ac>
 8005b12:	07d9      	lsls	r1, r3, #31
 8005b14:	bf44      	itt	mi
 8005b16:	f043 0320 	orrmi.w	r3, r3, #32
 8005b1a:	6023      	strmi	r3, [r4, #0]
 8005b1c:	b91d      	cbnz	r5, 8005b26 <_printf_i+0x196>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	f023 0320 	bic.w	r3, r3, #32
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	2310      	movs	r3, #16
 8005b28:	e7b0      	b.n	8005a8c <_printf_i+0xfc>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	f043 0320 	orr.w	r3, r3, #32
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	2378      	movs	r3, #120	; 0x78
 8005b34:	4828      	ldr	r0, [pc, #160]	; (8005bd8 <_printf_i+0x248>)
 8005b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b3a:	e7e3      	b.n	8005b04 <_printf_i+0x174>
 8005b3c:	065e      	lsls	r6, r3, #25
 8005b3e:	bf48      	it	mi
 8005b40:	b2ad      	uxthmi	r5, r5
 8005b42:	e7e6      	b.n	8005b12 <_printf_i+0x182>
 8005b44:	4616      	mov	r6, r2
 8005b46:	e7bb      	b.n	8005ac0 <_printf_i+0x130>
 8005b48:	680b      	ldr	r3, [r1, #0]
 8005b4a:	6826      	ldr	r6, [r4, #0]
 8005b4c:	6960      	ldr	r0, [r4, #20]
 8005b4e:	1d1d      	adds	r5, r3, #4
 8005b50:	600d      	str	r5, [r1, #0]
 8005b52:	0635      	lsls	r5, r6, #24
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	d501      	bpl.n	8005b5c <_printf_i+0x1cc>
 8005b58:	6018      	str	r0, [r3, #0]
 8005b5a:	e002      	b.n	8005b62 <_printf_i+0x1d2>
 8005b5c:	0671      	lsls	r1, r6, #25
 8005b5e:	d5fb      	bpl.n	8005b58 <_printf_i+0x1c8>
 8005b60:	8018      	strh	r0, [r3, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	4616      	mov	r6, r2
 8005b68:	e7ba      	b.n	8005ae0 <_printf_i+0x150>
 8005b6a:	680b      	ldr	r3, [r1, #0]
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	600a      	str	r2, [r1, #0]
 8005b70:	681e      	ldr	r6, [r3, #0]
 8005b72:	6862      	ldr	r2, [r4, #4]
 8005b74:	2100      	movs	r1, #0
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7fa fb4a 	bl	8000210 <memchr>
 8005b7c:	b108      	cbz	r0, 8005b82 <_printf_i+0x1f2>
 8005b7e:	1b80      	subs	r0, r0, r6
 8005b80:	6060      	str	r0, [r4, #4]
 8005b82:	6863      	ldr	r3, [r4, #4]
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	2300      	movs	r3, #0
 8005b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8c:	e7a8      	b.n	8005ae0 <_printf_i+0x150>
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	4632      	mov	r2, r6
 8005b92:	4649      	mov	r1, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	47d0      	blx	sl
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d0ab      	beq.n	8005af4 <_printf_i+0x164>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	079b      	lsls	r3, r3, #30
 8005ba0:	d413      	bmi.n	8005bca <_printf_i+0x23a>
 8005ba2:	68e0      	ldr	r0, [r4, #12]
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	4298      	cmp	r0, r3
 8005ba8:	bfb8      	it	lt
 8005baa:	4618      	movlt	r0, r3
 8005bac:	e7a4      	b.n	8005af8 <_printf_i+0x168>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	47d0      	blx	sl
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d09b      	beq.n	8005af4 <_printf_i+0x164>
 8005bbc:	3501      	adds	r5, #1
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	9903      	ldr	r1, [sp, #12]
 8005bc2:	1a5b      	subs	r3, r3, r1
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	dcf2      	bgt.n	8005bae <_printf_i+0x21e>
 8005bc8:	e7eb      	b.n	8005ba2 <_printf_i+0x212>
 8005bca:	2500      	movs	r5, #0
 8005bcc:	f104 0619 	add.w	r6, r4, #25
 8005bd0:	e7f5      	b.n	8005bbe <_printf_i+0x22e>
 8005bd2:	bf00      	nop
 8005bd4:	08006c51 	.word	0x08006c51
 8005bd8:	08006c62 	.word	0x08006c62

08005bdc <memmove>:
 8005bdc:	4288      	cmp	r0, r1
 8005bde:	b510      	push	{r4, lr}
 8005be0:	eb01 0402 	add.w	r4, r1, r2
 8005be4:	d902      	bls.n	8005bec <memmove+0x10>
 8005be6:	4284      	cmp	r4, r0
 8005be8:	4623      	mov	r3, r4
 8005bea:	d807      	bhi.n	8005bfc <memmove+0x20>
 8005bec:	1e43      	subs	r3, r0, #1
 8005bee:	42a1      	cmp	r1, r4
 8005bf0:	d008      	beq.n	8005c04 <memmove+0x28>
 8005bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bfa:	e7f8      	b.n	8005bee <memmove+0x12>
 8005bfc:	4402      	add	r2, r0
 8005bfe:	4601      	mov	r1, r0
 8005c00:	428a      	cmp	r2, r1
 8005c02:	d100      	bne.n	8005c06 <memmove+0x2a>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c0e:	e7f7      	b.n	8005c00 <memmove+0x24>

08005c10 <_free_r>:
 8005c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c12:	2900      	cmp	r1, #0
 8005c14:	d048      	beq.n	8005ca8 <_free_r+0x98>
 8005c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c1a:	9001      	str	r0, [sp, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c22:	bfb8      	it	lt
 8005c24:	18e4      	addlt	r4, r4, r3
 8005c26:	f000 f8d3 	bl	8005dd0 <__malloc_lock>
 8005c2a:	4a20      	ldr	r2, [pc, #128]	; (8005cac <_free_r+0x9c>)
 8005c2c:	9801      	ldr	r0, [sp, #4]
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	4615      	mov	r5, r2
 8005c32:	b933      	cbnz	r3, 8005c42 <_free_r+0x32>
 8005c34:	6063      	str	r3, [r4, #4]
 8005c36:	6014      	str	r4, [r2, #0]
 8005c38:	b003      	add	sp, #12
 8005c3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c3e:	f000 b8cd 	b.w	8005ddc <__malloc_unlock>
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	d90b      	bls.n	8005c5e <_free_r+0x4e>
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	1862      	adds	r2, r4, r1
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	bf04      	itt	eq
 8005c4e:	681a      	ldreq	r2, [r3, #0]
 8005c50:	685b      	ldreq	r3, [r3, #4]
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	bf04      	itt	eq
 8005c56:	1852      	addeq	r2, r2, r1
 8005c58:	6022      	streq	r2, [r4, #0]
 8005c5a:	602c      	str	r4, [r5, #0]
 8005c5c:	e7ec      	b.n	8005c38 <_free_r+0x28>
 8005c5e:	461a      	mov	r2, r3
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	b10b      	cbz	r3, 8005c68 <_free_r+0x58>
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	d9fa      	bls.n	8005c5e <_free_r+0x4e>
 8005c68:	6811      	ldr	r1, [r2, #0]
 8005c6a:	1855      	adds	r5, r2, r1
 8005c6c:	42a5      	cmp	r5, r4
 8005c6e:	d10b      	bne.n	8005c88 <_free_r+0x78>
 8005c70:	6824      	ldr	r4, [r4, #0]
 8005c72:	4421      	add	r1, r4
 8005c74:	1854      	adds	r4, r2, r1
 8005c76:	42a3      	cmp	r3, r4
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	d1dd      	bne.n	8005c38 <_free_r+0x28>
 8005c7c:	681c      	ldr	r4, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	6053      	str	r3, [r2, #4]
 8005c82:	4421      	add	r1, r4
 8005c84:	6011      	str	r1, [r2, #0]
 8005c86:	e7d7      	b.n	8005c38 <_free_r+0x28>
 8005c88:	d902      	bls.n	8005c90 <_free_r+0x80>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	6003      	str	r3, [r0, #0]
 8005c8e:	e7d3      	b.n	8005c38 <_free_r+0x28>
 8005c90:	6825      	ldr	r5, [r4, #0]
 8005c92:	1961      	adds	r1, r4, r5
 8005c94:	428b      	cmp	r3, r1
 8005c96:	bf04      	itt	eq
 8005c98:	6819      	ldreq	r1, [r3, #0]
 8005c9a:	685b      	ldreq	r3, [r3, #4]
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	bf04      	itt	eq
 8005ca0:	1949      	addeq	r1, r1, r5
 8005ca2:	6021      	streq	r1, [r4, #0]
 8005ca4:	6054      	str	r4, [r2, #4]
 8005ca6:	e7c7      	b.n	8005c38 <_free_r+0x28>
 8005ca8:	b003      	add	sp, #12
 8005caa:	bd30      	pop	{r4, r5, pc}
 8005cac:	20004450 	.word	0x20004450

08005cb0 <_malloc_r>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	1ccd      	adds	r5, r1, #3
 8005cb4:	f025 0503 	bic.w	r5, r5, #3
 8005cb8:	3508      	adds	r5, #8
 8005cba:	2d0c      	cmp	r5, #12
 8005cbc:	bf38      	it	cc
 8005cbe:	250c      	movcc	r5, #12
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	db01      	blt.n	8005cca <_malloc_r+0x1a>
 8005cc6:	42a9      	cmp	r1, r5
 8005cc8:	d903      	bls.n	8005cd2 <_malloc_r+0x22>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	2000      	movs	r0, #0
 8005cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd2:	f000 f87d 	bl	8005dd0 <__malloc_lock>
 8005cd6:	4921      	ldr	r1, [pc, #132]	; (8005d5c <_malloc_r+0xac>)
 8005cd8:	680a      	ldr	r2, [r1, #0]
 8005cda:	4614      	mov	r4, r2
 8005cdc:	b99c      	cbnz	r4, 8005d06 <_malloc_r+0x56>
 8005cde:	4f20      	ldr	r7, [pc, #128]	; (8005d60 <_malloc_r+0xb0>)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	b923      	cbnz	r3, 8005cee <_malloc_r+0x3e>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f000 f862 	bl	8005db0 <_sbrk_r>
 8005cec:	6038      	str	r0, [r7, #0]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f000 f85d 	bl	8005db0 <_sbrk_r>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	d123      	bne.n	8005d42 <_malloc_r+0x92>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	6033      	str	r3, [r6, #0]
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f000 f86c 	bl	8005ddc <__malloc_unlock>
 8005d04:	e7e3      	b.n	8005cce <_malloc_r+0x1e>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	1b5b      	subs	r3, r3, r5
 8005d0a:	d417      	bmi.n	8005d3c <_malloc_r+0x8c>
 8005d0c:	2b0b      	cmp	r3, #11
 8005d0e:	d903      	bls.n	8005d18 <_malloc_r+0x68>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	441c      	add	r4, r3
 8005d14:	6025      	str	r5, [r4, #0]
 8005d16:	e004      	b.n	8005d22 <_malloc_r+0x72>
 8005d18:	6863      	ldr	r3, [r4, #4]
 8005d1a:	42a2      	cmp	r2, r4
 8005d1c:	bf0c      	ite	eq
 8005d1e:	600b      	streq	r3, [r1, #0]
 8005d20:	6053      	strne	r3, [r2, #4]
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 f85a 	bl	8005ddc <__malloc_unlock>
 8005d28:	f104 000b 	add.w	r0, r4, #11
 8005d2c:	1d23      	adds	r3, r4, #4
 8005d2e:	f020 0007 	bic.w	r0, r0, #7
 8005d32:	1ac2      	subs	r2, r0, r3
 8005d34:	d0cc      	beq.n	8005cd0 <_malloc_r+0x20>
 8005d36:	1a1b      	subs	r3, r3, r0
 8005d38:	50a3      	str	r3, [r4, r2]
 8005d3a:	e7c9      	b.n	8005cd0 <_malloc_r+0x20>
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	6864      	ldr	r4, [r4, #4]
 8005d40:	e7cc      	b.n	8005cdc <_malloc_r+0x2c>
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d0e3      	beq.n	8005d14 <_malloc_r+0x64>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f000 f82e 	bl	8005db0 <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d1dd      	bne.n	8005d14 <_malloc_r+0x64>
 8005d58:	e7cf      	b.n	8005cfa <_malloc_r+0x4a>
 8005d5a:	bf00      	nop
 8005d5c:	20004450 	.word	0x20004450
 8005d60:	20004454 	.word	0x20004454

08005d64 <_realloc_r>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	4607      	mov	r7, r0
 8005d68:	4614      	mov	r4, r2
 8005d6a:	460e      	mov	r6, r1
 8005d6c:	b921      	cbnz	r1, 8005d78 <_realloc_r+0x14>
 8005d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d72:	4611      	mov	r1, r2
 8005d74:	f7ff bf9c 	b.w	8005cb0 <_malloc_r>
 8005d78:	b922      	cbnz	r2, 8005d84 <_realloc_r+0x20>
 8005d7a:	f7ff ff49 	bl	8005c10 <_free_r>
 8005d7e:	4625      	mov	r5, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d84:	f000 f830 	bl	8005de8 <_malloc_usable_size_r>
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d20f      	bcs.n	8005dac <_realloc_r+0x48>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f7ff ff8e 	bl	8005cb0 <_malloc_r>
 8005d94:	4605      	mov	r5, r0
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d0f2      	beq.n	8005d80 <_realloc_r+0x1c>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	f7ff fbf7 	bl	8005590 <memcpy>
 8005da2:	4631      	mov	r1, r6
 8005da4:	4638      	mov	r0, r7
 8005da6:	f7ff ff33 	bl	8005c10 <_free_r>
 8005daa:	e7e9      	b.n	8005d80 <_realloc_r+0x1c>
 8005dac:	4635      	mov	r5, r6
 8005dae:	e7e7      	b.n	8005d80 <_realloc_r+0x1c>

08005db0 <_sbrk_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d06      	ldr	r5, [pc, #24]	; (8005dcc <_sbrk_r+0x1c>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	4604      	mov	r4, r0
 8005db8:	4608      	mov	r0, r1
 8005dba:	602b      	str	r3, [r5, #0]
 8005dbc:	f7fb fb7c 	bl	80014b8 <_sbrk>
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	d102      	bne.n	8005dca <_sbrk_r+0x1a>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	b103      	cbz	r3, 8005dca <_sbrk_r+0x1a>
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	200045ac 	.word	0x200045ac

08005dd0 <__malloc_lock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__malloc_lock+0x8>)
 8005dd2:	f000 b811 	b.w	8005df8 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	200045b4 	.word	0x200045b4

08005ddc <__malloc_unlock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__malloc_unlock+0x8>)
 8005dde:	f000 b80c 	b.w	8005dfa <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	200045b4 	.word	0x200045b4

08005de8 <_malloc_usable_size_r>:
 8005de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dec:	1f18      	subs	r0, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bfbc      	itt	lt
 8005df2:	580b      	ldrlt	r3, [r1, r0]
 8005df4:	18c0      	addlt	r0, r0, r3
 8005df6:	4770      	bx	lr

08005df8 <__retarget_lock_acquire_recursive>:
 8005df8:	4770      	bx	lr

08005dfa <__retarget_lock_release_recursive>:
 8005dfa:	4770      	bx	lr

08005dfc <_init>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr

08005e08 <_fini>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr
