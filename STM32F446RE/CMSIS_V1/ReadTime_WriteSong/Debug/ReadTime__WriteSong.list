
ReadTime__WriteSong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000388c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003acc  08003acc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ad4  08003ad4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000405c  20000010  08003aec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000406c  08003aec  0002406c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015323  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1f  00000000  00000000  00035363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  000391a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d11  00000000  00000000  0003a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137c4  00000000  00000000  0005cec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d85fb  00000000  00000000  00070685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046fc  00000000  00000000  00148cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a44 	.word	0x08003a44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003a44 	.word	0x08003a44

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000080 	.word	0x20000080

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08e      	sub	sp, #56	; 0x38
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fa83 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f833 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f8cd 	bl	80006e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054e:	f000 f8a1 	bl	8000694 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readTime */
  osThreadDef(readTime, StartReadTime, osPriorityBelowNormal, 0, 128);
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <main+0x64>)
 8000554:	f107 041c 	add.w	r4, r7, #28
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readTimeHandle = osThreadCreate(osThread(readTime), NULL);
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 f80e 	bl	800258e <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <main+0x68>)
 8000576:	6013      	str	r3, [r2, #0]

  /* definition and creation of songTask */
  osThreadDef(songTask, StartSongTask, osPriorityIdle, 0, 128);
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x6c>)
 800057a:	463c      	mov	r4, r7
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  songTaskHandle = osThreadCreate(osThread(songTask), NULL);
 800058a:	463b      	mov	r3, r7
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fffd 	bl	800258e <osThreadCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <main+0x70>)
 8000598:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059a:	f001 fff1 	bl	8002580 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x62>
 80005a0:	08003a74 	.word	0x08003a74
 80005a4:	20003fd4 	.word	0x20003fd4
 80005a8:	08003a90 	.word	0x08003a90
 80005ac:	20003fd8 	.word	0x20003fd8

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2234      	movs	r2, #52	; 0x34
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fa38 	bl	8003a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <SystemClock_Config+0xdc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a2b      	ldr	r2, [pc, #172]	; (800068c <SystemClock_Config+0xdc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xdc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <SystemClock_Config+0xe0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a25      	ldr	r2, [pc, #148]	; (8000690 <SystemClock_Config+0xe0>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xe0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000624:	23b4      	movs	r3, #180	; 0xb4
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f827 	bl	800168c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000644:	f000 f8d2 	bl	80007ec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000648:	f000 fcd2 	bl	8000ff0 <HAL_PWREx_EnableOverDrive>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000652:	f000 f8cb 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000662:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd0b 	bl	8001090 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000680:	f000 f8b4 	bl	80007ec <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_USART2_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006cc:	f001 fd2a 	bl	8002124 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f889 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20003fdc 	.word	0x20003fdc
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	; (800079c <MX_GPIO_Init+0xb4>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xb4>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0xb4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0xb4>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0xb4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000758:	f000 fc30 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_GPIO_Init+0xbc>)
 8000774:	f000 fa8e 	bl	8000c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xb8>)
 8000790:	f000 fa80 	bl	8000c94 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <StartReadTime>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadTime */
void StartReadTime(void const * argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f001 ff38 	bl	8002626 <osDelay>
 80007b6:	e7fb      	b.n	80007b0 <StartReadTime+0x8>

080007b8 <StartSongTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSongTask */
void StartSongTask(void const * argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSongTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 ff30 	bl	8002626 <osDelay>
 80007c6:	e7fb      	b.n	80007c0 <StartSongTask+0x8>

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 f959 	bl	8000a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40010000 	.word	0x40010000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x54>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_MspInit+0x54>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x54>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x54>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 f9ff 	bl	8000c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_UART_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12b      	bne.n	80008ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x88>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <HAL_UART_MspInit+0x88>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_UART_MspInit+0x88>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ba:	2307      	movs	r3, #7
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_UART_MspInit+0x8c>)
 80008c6:	f000 f9e5 	bl	8000c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2019      	movs	r0, #25
 80008f6:	f000 f9a3 	bl	8000c40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008fa:	2019      	movs	r0, #25
 80008fc:	f000 f9bc 	bl	8000c78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <HAL_InitTick+0xa4>)
 8000906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000908:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <HAL_InitTick+0xa4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6453      	str	r3, [r2, #68]	; 0x44
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <HAL_InitTick+0xa4>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091c:	f107 0210 	add.w	r2, r7, #16
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fccc 	bl	80012c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800092c:	f000 fcb6 	bl	800129c <HAL_RCC_GetPCLK2Freq>
 8000930:	4603      	mov	r3, r0
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000938:	4a13      	ldr	r2, [pc, #76]	; (8000988 <HAL_InitTick+0xa8>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	0c9b      	lsrs	r3, r3, #18
 8000940:	3b01      	subs	r3, #1
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_InitTick+0xac>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <HAL_InitTick+0xb0>)
 8000948:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_InitTick+0xac>)
 800094c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000950:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_InitTick+0xac>)
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000956:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_InitTick+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_InitTick+0xac>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <HAL_InitTick+0xac>)
 8000966:	f001 f92f 	bl	8001bc8 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d104      	bne.n	800097a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000970:	4806      	ldr	r0, [pc, #24]	; (800098c <HAL_InitTick+0xac>)
 8000972:	f001 f983 	bl	8001c7c <HAL_TIM_Base_Start_IT>
 8000976:	4603      	mov	r3, r0
 8000978:	e000      	b.n	800097c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	3730      	adds	r7, #48	; 0x30
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	431bde83 	.word	0x431bde83
 800098c:	20004020 	.word	0x20004020
 8000990:	40010000 	.word	0x40010000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <NMI_Handler+0x4>

0800099a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <MemManage_Handler+0x4>

080009a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009c6:	f001 f9c9 	bl	8001d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20004020 	.word	0x20004020

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fe:	490e      	ldr	r1, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a14:	4c0b      	ldr	r4, [pc, #44]	; (8000a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a22:	f7ff ffd7 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f002 ffe1 	bl	80039ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fd87 	bl	800053c <main>
  bx  lr    
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a3c:	08003adc 	.word	0x08003adc
  ldr r2, =_sbss
 8000a40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a44:	2000406c 	.word	0x2000406c

08000a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_Init+0x40>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_Init+0x40>)
 8000a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x40>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f8d8 	bl	8000c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff30 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff feba 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023c00 	.word	0x40023c00

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20004068 	.word	0x20004068

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20004068 	.word	0x20004068

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff4c 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c52:	f7ff ff61 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	6978      	ldr	r0, [r7, #20]
 8000c5e:	f7ff ffb1 	bl	8000bc4 <NVIC_EncodePriority>
 8000c62:	4602      	mov	r2, r0
 8000c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff80 	bl	8000b70 <__NVIC_SetPriority>
}
 8000c70:	bf00      	nop
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff54 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e165      	b.n	8000f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 8154 	bne.w	8000f76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d130      	bne.n	8000d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69b9      	ldr	r1, [r7, #24]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80ae 	beq.w	8000f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a5c      	ldr	r2, [pc, #368]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <HAL_GPIO_Init+0x300>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e36:	4a58      	ldr	r2, [pc, #352]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	089b      	lsrs	r3, r3, #2
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	; (8000f9c <HAL_GPIO_Init+0x308>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d025      	beq.n	8000eae <HAL_GPIO_Init+0x21a>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_GPIO_Init+0x30c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d01f      	beq.n	8000eaa <HAL_GPIO_Init+0x216>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_GPIO_Init+0x310>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d019      	beq.n	8000ea6 <HAL_GPIO_Init+0x212>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <HAL_GPIO_Init+0x314>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x20e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_GPIO_Init+0x318>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x20a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <HAL_GPIO_Init+0x31c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x206>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x320>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x202>
 8000e92:	2306      	movs	r3, #6
 8000e94:	e00c      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000e96:	2307      	movs	r3, #7
 8000e98:	e00a      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	e008      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x21c>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	f002 0203 	and.w	r2, r2, #3
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <HAL_GPIO_Init+0x304>)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_GPIO_Init+0x324>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	f67f ae96 	bls.w	8000cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	40021800 	.word	0x40021800
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd8:	e003      	b.n	8000fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	041a      	lsls	r2, r3, #16
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	619a      	str	r2, [r3, #24]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_PWREx_EnableOverDrive+0x90>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_PWREx_EnableOverDrive+0x90>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_PWREx_EnableOverDrive+0x90>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_PWREx_EnableOverDrive+0x94>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff fd4c 	bl	8000ab8 <HAL_GetTick>
 8001020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001022:	e009      	b.n	8001038 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001024:	f7ff fd48 	bl	8000ab8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d901      	bls.n	8001038 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e01f      	b.n	8001078 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_PWREx_EnableOverDrive+0x98>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d1ee      	bne.n	8001024 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800104c:	f7ff fd34 	bl	8000ab8 <HAL_GetTick>
 8001050:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001052:	e009      	b.n	8001068 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001054:	f7ff fd30 	bl	8000ab8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	d901      	bls.n	8001068 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e007      	b.n	8001078 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_PWREx_EnableOverDrive+0x98>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001074:	d1ee      	bne.n	8001054 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	420e0040 	.word	0x420e0040
 8001088:	40007000 	.word	0x40007000
 800108c:	420e0044 	.word	0x420e0044

08001090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0cc      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 030f 	and.w	r3, r3, #15
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d90c      	bls.n	80010cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d044      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d119      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114a:	2b03      	cmp	r3, #3
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e067      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f023 0203 	bic.w	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff fc9a 	bl	8000ab8 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001186:	e00a      	b.n	800119e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001188:	f7ff fc96 	bl	8000ab8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e04f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 020c 	and.w	r2, r3, #12
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1eb      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d20c      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f887 	bl	8001328 <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	490a      	ldr	r1, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fb52 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00
 800124c:	40023800 	.word	0x40023800
 8001250:	08003ab4 	.word	0x08003ab4
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_RCC_GetHCLKFreq+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001278:	f7ff fff0 	bl	800125c <HAL_RCC_GetHCLKFreq>
 800127c:	4602      	mov	r2, r0
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	0a9b      	lsrs	r3, r3, #10
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	4903      	ldr	r1, [pc, #12]	; (8001298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800128a:	5ccb      	ldrb	r3, [r1, r3]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	08003ac4 	.word	0x08003ac4

0800129c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012a0:	f7ff ffdc 	bl	800125c <HAL_RCC_GetHCLKFreq>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	0b5b      	lsrs	r3, r3, #13
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	4903      	ldr	r1, [pc, #12]	; (80012c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012b2:	5ccb      	ldrb	r3, [r1, r3]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	08003ac4 	.word	0x08003ac4

080012c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	220f      	movs	r2, #15
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_RCC_GetClockConfig+0x5c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0203 	and.w	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_RCC_GetClockConfig+0x5c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_RCC_GetClockConfig+0x5c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_GetClockConfig+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_RCC_GetClockConfig+0x60>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 020f 	and.w	r2, r3, #15
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800132c:	b088      	sub	sp, #32
 800132e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001344:	4bce      	ldr	r3, [pc, #824]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b0c      	cmp	r3, #12
 800134e:	f200 818d 	bhi.w	800166c <HAL_RCC_GetSysClockFreq+0x344>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <HAL_RCC_GetSysClockFreq+0x30>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	0800138d 	.word	0x0800138d
 800135c:	0800166d 	.word	0x0800166d
 8001360:	0800166d 	.word	0x0800166d
 8001364:	0800166d 	.word	0x0800166d
 8001368:	08001393 	.word	0x08001393
 800136c:	0800166d 	.word	0x0800166d
 8001370:	0800166d 	.word	0x0800166d
 8001374:	0800166d 	.word	0x0800166d
 8001378:	08001399 	.word	0x08001399
 800137c:	0800166d 	.word	0x0800166d
 8001380:	0800166d 	.word	0x0800166d
 8001384:	0800166d 	.word	0x0800166d
 8001388:	0800150d 	.word	0x0800150d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4bbd      	ldr	r3, [pc, #756]	; (8001684 <HAL_RCC_GetSysClockFreq+0x35c>)
 800138e:	61bb      	str	r3, [r7, #24]
       break;
 8001390:	e16f      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001392:	4bbd      	ldr	r3, [pc, #756]	; (8001688 <HAL_RCC_GetSysClockFreq+0x360>)
 8001394:	61bb      	str	r3, [r7, #24]
      break;
 8001396:	e16c      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001398:	4bb9      	ldr	r3, [pc, #740]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a2:	4bb7      	ldr	r3, [pc, #732]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d053      	beq.n	8001456 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	4bb4      	ldr	r3, [pc, #720]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	461a      	mov	r2, r3
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013be:	f04f 0100 	mov.w	r1, #0
 80013c2:	ea02 0400 	and.w	r4, r2, r0
 80013c6:	603c      	str	r4, [r7, #0]
 80013c8:	400b      	ands	r3, r1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	014b      	lsls	r3, r1, #5
 80013de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013e2:	0142      	lsls	r2, r0, #5
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	1ac0      	subs	r0, r0, r3
 80013ec:	462b      	mov	r3, r5
 80013ee:	eb61 0103 	sbc.w	r1, r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	018b      	lsls	r3, r1, #6
 80013fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001400:	0182      	lsls	r2, r0, #6
 8001402:	1a12      	subs	r2, r2, r0
 8001404:	eb63 0301 	sbc.w	r3, r3, r1
 8001408:	f04f 0000 	mov.w	r0, #0
 800140c:	f04f 0100 	mov.w	r1, #0
 8001410:	00d9      	lsls	r1, r3, #3
 8001412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001416:	00d0      	lsls	r0, r2, #3
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4621      	mov	r1, r4
 800141e:	1852      	adds	r2, r2, r1
 8001420:	4629      	mov	r1, r5
 8001422:	eb43 0101 	adc.w	r1, r3, r1
 8001426:	460b      	mov	r3, r1
 8001428:	f04f 0000 	mov.w	r0, #0
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	0259      	lsls	r1, r3, #9
 8001432:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001436:	0250      	lsls	r0, r2, #9
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	461a      	mov	r2, r3
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f7fe fee2 	bl	8000210 <__aeabi_uldivmod>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4613      	mov	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e04c      	b.n	80014f0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001456:	4b8a      	ldr	r3, [pc, #552]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	099b      	lsrs	r3, r3, #6
 800145c:	461a      	mov	r2, r3
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	ea02 0a00 	and.w	sl, r2, r0
 800146e:	ea03 0b01 	and.w	fp, r3, r1
 8001472:	4650      	mov	r0, sl
 8001474:	4659      	mov	r1, fp
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	014b      	lsls	r3, r1, #5
 8001480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001484:	0142      	lsls	r2, r0, #5
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	ebb0 000a 	subs.w	r0, r0, sl
 800148e:	eb61 010b 	sbc.w	r1, r1, fp
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	018b      	lsls	r3, r1, #6
 800149c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014a0:	0182      	lsls	r2, r0, #6
 80014a2:	1a12      	subs	r2, r2, r0
 80014a4:	eb63 0301 	sbc.w	r3, r3, r1
 80014a8:	f04f 0000 	mov.w	r0, #0
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	00d9      	lsls	r1, r3, #3
 80014b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014b6:	00d0      	lsls	r0, r2, #3
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	eb12 020a 	adds.w	r2, r2, sl
 80014c0:	eb43 030b 	adc.w	r3, r3, fp
 80014c4:	f04f 0000 	mov.w	r0, #0
 80014c8:	f04f 0100 	mov.w	r1, #0
 80014cc:	0299      	lsls	r1, r3, #10
 80014ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80014d2:	0290      	lsls	r0, r2, #10
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	461a      	mov	r2, r3
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f7fe fe94 	bl	8000210 <__aeabi_uldivmod>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4613      	mov	r3, r2
 80014ee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014f0:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	3301      	adds	r3, #1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	fbb2 f3f3 	udiv	r3, r2, r3
 8001508:	61bb      	str	r3, [r7, #24]
      break;
 800150a:	e0b2      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150c:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001514:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001516:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d04d      	beq.n	80015be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001522:	4b57      	ldr	r3, [pc, #348]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	461a      	mov	r2, r3
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	ea02 0800 	and.w	r8, r2, r0
 800153a:	ea03 0901 	and.w	r9, r3, r1
 800153e:	4640      	mov	r0, r8
 8001540:	4649      	mov	r1, r9
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	014b      	lsls	r3, r1, #5
 800154c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001550:	0142      	lsls	r2, r0, #5
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	ebb0 0008 	subs.w	r0, r0, r8
 800155a:	eb61 0109 	sbc.w	r1, r1, r9
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	018b      	lsls	r3, r1, #6
 8001568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800156c:	0182      	lsls	r2, r0, #6
 800156e:	1a12      	subs	r2, r2, r0
 8001570:	eb63 0301 	sbc.w	r3, r3, r1
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	00d9      	lsls	r1, r3, #3
 800157e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001582:	00d0      	lsls	r0, r2, #3
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	eb12 0208 	adds.w	r2, r2, r8
 800158c:	eb43 0309 	adc.w	r3, r3, r9
 8001590:	f04f 0000 	mov.w	r0, #0
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	0259      	lsls	r1, r3, #9
 800159a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800159e:	0250      	lsls	r0, r2, #9
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	f7fe fe2e 	bl	8000210 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4613      	mov	r3, r2
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	e04a      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	099b      	lsrs	r3, r3, #6
 80015c4:	461a      	mov	r2, r3
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	ea02 0400 	and.w	r4, r2, r0
 80015d6:	ea03 0501 	and.w	r5, r3, r1
 80015da:	4620      	mov	r0, r4
 80015dc:	4629      	mov	r1, r5
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	014b      	lsls	r3, r1, #5
 80015e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015ec:	0142      	lsls	r2, r0, #5
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	1b00      	subs	r0, r0, r4
 80015f4:	eb61 0105 	sbc.w	r1, r1, r5
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	018b      	lsls	r3, r1, #6
 8001602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001606:	0182      	lsls	r2, r0, #6
 8001608:	1a12      	subs	r2, r2, r0
 800160a:	eb63 0301 	sbc.w	r3, r3, r1
 800160e:	f04f 0000 	mov.w	r0, #0
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	00d9      	lsls	r1, r3, #3
 8001618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800161c:	00d0      	lsls	r0, r2, #3
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	1912      	adds	r2, r2, r4
 8001624:	eb45 0303 	adc.w	r3, r5, r3
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0299      	lsls	r1, r3, #10
 8001632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001636:	0290      	lsls	r0, r2, #10
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	461a      	mov	r2, r3
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f7fe fde2 	bl	8000210 <__aeabi_uldivmod>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4613      	mov	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_RCC_GetSysClockFreq+0x358>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0f1b      	lsrs	r3, r3, #28
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	61bb      	str	r3, [r7, #24]
      break;
 800166a:	e002      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetSysClockFreq+0x35c>)
 800166e:	61bb      	str	r3, [r7, #24]
      break;
 8001670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001672:	69bb      	ldr	r3, [r7, #24]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	00f42400 	.word	0x00f42400
 8001688:	007a1200 	.word	0x007a1200

0800168c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e28d      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8083 	beq.w	80017b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016ac:	4b94      	ldr	r3, [pc, #592]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d019      	beq.n	80016ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016b8:	4b91      	ldr	r3, [pc, #580]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016c4:	4b8e      	ldr	r3, [pc, #568]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016d0:	d00c      	beq.n	80016ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016de:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ea:	d10b      	bne.n	8001704 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4b84      	ldr	r3, [pc, #528]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d05b      	beq.n	80017b0 <HAL_RCC_OscConfig+0x124>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d157      	bne.n	80017b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e25a      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x90>
 800170e:	4b7c      	ldr	r3, [pc, #496]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7b      	ldr	r2, [pc, #492]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xcc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xb4>
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a75      	ldr	r2, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b73      	ldr	r3, [pc, #460]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a72      	ldr	r2, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xcc>
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6b      	ldr	r2, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff f9aa 	bl	8000ab8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff f9a6 	bl	8000ab8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e21f      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xdc>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff f996 	bl	8000ab8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff f992 	bl	8000ab8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e20b      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x104>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d06f      	beq.n	800189e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017be:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d017      	beq.n	80017fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ca:	4b4d      	ldr	r3, [pc, #308]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d105      	bne.n	80017e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d11c      	bne.n	8001828 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x186>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e1d3      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4937      	ldr	r1, [pc, #220]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	e03a      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001830:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x278>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff f93f 	bl	8000ab8 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183e:	f7ff f93b 	bl	8000ab8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1b4      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4925      	ldr	r1, [pc, #148]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_OscConfig+0x278>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f91e 	bl	8000ab8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff f91a 	bl	8000ab8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e193      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d036      	beq.n	8001918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d016      	beq.n	80018e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff f8fe 	bl	8000ab8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff f8fa 	bl	8000ab8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e173      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_OscConfig+0x274>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x234>
 80018de:	e01b      	b.n	8001918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff f8e7 	bl	8000ab8 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	e00e      	b.n	800190c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff f8e3 	bl	8000ab8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d907      	bls.n	800190c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e15c      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
 8001900:	40023800 	.word	0x40023800
 8001904:	42470000 	.word	0x42470000
 8001908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b8a      	ldr	r3, [pc, #552]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 800190e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ea      	bne.n	80018ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 8097 	beq.w	8001a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b83      	ldr	r3, [pc, #524]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a7e      	ldr	r2, [pc, #504]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_RCC_OscConfig+0x4b0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x4b0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a75      	ldr	r2, [pc, #468]	; (8001b3c <HAL_RCC_OscConfig+0x4b0>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff f8a3 	bl	8000ab8 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7ff f89f 	bl	8000ab8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e118      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x4b0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x31e>
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
 80019a8:	e01c      	b.n	80019e4 <HAL_RCC_OscConfig+0x358>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x340>
 80019b2:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0x358>
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a59      	ldr	r2, [pc, #356]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a56      	ldr	r2, [pc, #344]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 80019de:	f023 0304 	bic.w	r3, r3, #4
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff f864 	bl	8000ab8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff f860 	bl	8000ab8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0d7      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0ee      	beq.n	80019f4 <HAL_RCC_OscConfig+0x368>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f84e 	bl	8000ab8 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff f84a 	bl	8000ab8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0c1      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ee      	bne.n	8001a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a3a      	ldr	r2, [pc, #232]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80ad 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a5e:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b08      	cmp	r3, #8
 8001a68:	d060      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d145      	bne.n	8001afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <HAL_RCC_OscConfig+0x4b4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f81e 	bl	8000ab8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f81a 	bl	8000ab8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e093      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	4b29      	ldr	r3, [pc, #164]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	019b      	lsls	r3, r3, #6
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	071b      	lsls	r3, r3, #28
 8001aca:	491b      	ldr	r1, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCC_OscConfig+0x4b4>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7fe ffef 	bl	8000ab8 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe ffeb 	bl	8000ab8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e064      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x452>
 8001afc:	e05c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_OscConfig+0x4b4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7fe ffd8 	bl	8000ab8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7fe ffd4 	bl	8000ab8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e04d      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x480>
 8001b2a:	e045      	b.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e040      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCC_OscConfig+0x538>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d030      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d129      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d122      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d119      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10f      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e041      	b.n	8001c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f839 	bl	8001c66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f000 f9d8 	bl	8001fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d001      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04e      	b.n	8001d32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d01d      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1e      	ldr	r2, [pc, #120]	; (8001d48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d111      	bne.n	8001d20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d010      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1e:	e007      	b.n	8001d30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40000c00 	.word	0x40000c00
 8001d50:	40010400 	.word	0x40010400
 8001d54:	40014000 	.word	0x40014000
 8001d58:	40001800 	.word	0x40001800

08001d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d122      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d11b      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0202 	mvn.w	r2, #2
 8001d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8ee 	bl	8001f80 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8e0 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8f1 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d122      	bne.n	8001e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d11b      	bne.n	8001e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0204 	mvn.w	r2, #4
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8c4 	bl	8001f80 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8b6 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f8c7 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0208 	mvn.w	r2, #8
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f89a 	bl	8001f80 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f88c 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f89d 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b10      	cmp	r3, #16
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0210 	mvn.w	r2, #16
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f870 	bl	8001f80 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f862 	bl	8001f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f873 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0201 	mvn.w	r2, #1
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fc74 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eea:	2b80      	cmp	r3, #128	; 0x80
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f902 	bl	8002110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b40      	cmp	r3, #64	; 0x40
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f838 	bl	8001fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0220 	mvn.w	r2, #32
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8cc 	bl	80020fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <TIM_Base_SetConfig+0x114>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fda:	d00f      	beq.n	8001ffc <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3d      	ldr	r2, [pc, #244]	; (80020d4 <TIM_Base_SetConfig+0x118>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00b      	beq.n	8001ffc <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <TIM_Base_SetConfig+0x11c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <TIM_Base_SetConfig+0x120>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <TIM_Base_SetConfig+0x124>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d108      	bne.n	800200e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <TIM_Base_SetConfig+0x114>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d02b      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201c:	d027      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <TIM_Base_SetConfig+0x118>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d023      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2b      	ldr	r2, [pc, #172]	; (80020d8 <TIM_Base_SetConfig+0x11c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01f      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <TIM_Base_SetConfig+0x120>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01b      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <TIM_Base_SetConfig+0x124>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d017      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a28      	ldr	r2, [pc, #160]	; (80020e4 <TIM_Base_SetConfig+0x128>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <TIM_Base_SetConfig+0x12c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00f      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a26      	ldr	r2, [pc, #152]	; (80020ec <TIM_Base_SetConfig+0x130>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00b      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <TIM_Base_SetConfig+0x134>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a24      	ldr	r2, [pc, #144]	; (80020f4 <TIM_Base_SetConfig+0x138>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <TIM_Base_SetConfig+0x13c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <TIM_Base_SetConfig+0x114>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d003      	beq.n	80020b4 <TIM_Base_SetConfig+0xf8>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <TIM_Base_SetConfig+0x124>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d103      	bne.n	80020bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	615a      	str	r2, [r3, #20]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40010000 	.word	0x40010000
 80020d4:	40000400 	.word	0x40000400
 80020d8:	40000800 	.word	0x40000800
 80020dc:	40000c00 	.word	0x40000c00
 80020e0:	40010400 	.word	0x40010400
 80020e4:	40014000 	.word	0x40014000
 80020e8:	40014400 	.word	0x40014400
 80020ec:	40014800 	.word	0x40014800
 80020f0:	40001800 	.word	0x40001800
 80020f4:	40001c00 	.word	0x40001c00
 80020f8:	40002000 	.word	0x40002000

080020fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e03f      	b.n	80021b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fb80 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2224      	movs	r2, #36	; 0x24
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f829 	bl	80021c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800217c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800218c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800219c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c4:	b09f      	sub	sp, #124	; 0x7c
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d6:	68d9      	ldr	r1, [r3, #12]
 80021d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	ea40 0301 	orr.w	r3, r0, r1
 80021e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002204:	f021 010c 	bic.w	r1, r1, #12
 8002208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800220e:	430b      	orrs	r3, r1
 8002210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	6999      	ldr	r1, [r3, #24]
 8002220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	ea40 0301 	orr.w	r3, r0, r1
 8002228:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800222a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4bc5      	ldr	r3, [pc, #788]	; (8002544 <UART_SetConfig+0x384>)
 8002230:	429a      	cmp	r2, r3
 8002232:	d004      	beq.n	800223e <UART_SetConfig+0x7e>
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4bc3      	ldr	r3, [pc, #780]	; (8002548 <UART_SetConfig+0x388>)
 800223a:	429a      	cmp	r2, r3
 800223c:	d103      	bne.n	8002246 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800223e:	f7ff f82d 	bl	800129c <HAL_RCC_GetPCLK2Freq>
 8002242:	6778      	str	r0, [r7, #116]	; 0x74
 8002244:	e002      	b.n	800224c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002246:	f7ff f815 	bl	8001274 <HAL_RCC_GetPCLK1Freq>
 800224a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800224c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002254:	f040 80b6 	bne.w	80023c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800225a:	461c      	mov	r4, r3
 800225c:	f04f 0500 	mov.w	r5, #0
 8002260:	4622      	mov	r2, r4
 8002262:	462b      	mov	r3, r5
 8002264:	1891      	adds	r1, r2, r2
 8002266:	6439      	str	r1, [r7, #64]	; 0x40
 8002268:	415b      	adcs	r3, r3
 800226a:	647b      	str	r3, [r7, #68]	; 0x44
 800226c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002270:	1912      	adds	r2, r2, r4
 8002272:	eb45 0303 	adc.w	r3, r5, r3
 8002276:	f04f 0000 	mov.w	r0, #0
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	00d9      	lsls	r1, r3, #3
 8002280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002284:	00d0      	lsls	r0, r2, #3
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	1911      	adds	r1, r2, r4
 800228c:	6639      	str	r1, [r7, #96]	; 0x60
 800228e:	416b      	adcs	r3, r5
 8002290:	667b      	str	r3, [r7, #100]	; 0x64
 8002292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	461a      	mov	r2, r3
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	1891      	adds	r1, r2, r2
 800229e:	63b9      	str	r1, [r7, #56]	; 0x38
 80022a0:	415b      	adcs	r3, r3
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022ac:	f7fd ffb0 	bl	8000210 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4ba5      	ldr	r3, [pc, #660]	; (800254c <UART_SetConfig+0x38c>)
 80022b6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	011e      	lsls	r6, r3, #4
 80022be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c0:	461c      	mov	r4, r3
 80022c2:	f04f 0500 	mov.w	r5, #0
 80022c6:	4622      	mov	r2, r4
 80022c8:	462b      	mov	r3, r5
 80022ca:	1891      	adds	r1, r2, r2
 80022cc:	6339      	str	r1, [r7, #48]	; 0x30
 80022ce:	415b      	adcs	r3, r3
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
 80022d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022d6:	1912      	adds	r2, r2, r4
 80022d8:	eb45 0303 	adc.w	r3, r5, r3
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	00d9      	lsls	r1, r3, #3
 80022e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ea:	00d0      	lsls	r0, r2, #3
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	1911      	adds	r1, r2, r4
 80022f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80022f4:	416b      	adcs	r3, r5
 80022f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	1891      	adds	r1, r2, r2
 8002304:	62b9      	str	r1, [r7, #40]	; 0x28
 8002306:	415b      	adcs	r3, r3
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800230e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002312:	f7fd ff7d 	bl	8000210 <__aeabi_uldivmod>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4b8c      	ldr	r3, [pc, #560]	; (800254c <UART_SetConfig+0x38c>)
 800231c:	fba3 1302 	umull	r1, r3, r3, r2
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	2164      	movs	r1, #100	; 0x64
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	3332      	adds	r3, #50	; 0x32
 800232e:	4a87      	ldr	r2, [pc, #540]	; (800254c <UART_SetConfig+0x38c>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800233c:	441e      	add	r6, r3
 800233e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002340:	4618      	mov	r0, r3
 8002342:	f04f 0100 	mov.w	r1, #0
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	1894      	adds	r4, r2, r2
 800234c:	623c      	str	r4, [r7, #32]
 800234e:	415b      	adcs	r3, r3
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002356:	1812      	adds	r2, r2, r0
 8002358:	eb41 0303 	adc.w	r3, r1, r3
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	f04f 0500 	mov.w	r5, #0
 8002364:	00dd      	lsls	r5, r3, #3
 8002366:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800236a:	00d4      	lsls	r4, r2, #3
 800236c:	4622      	mov	r2, r4
 800236e:	462b      	mov	r3, r5
 8002370:	1814      	adds	r4, r2, r0
 8002372:	653c      	str	r4, [r7, #80]	; 0x50
 8002374:	414b      	adcs	r3, r1
 8002376:	657b      	str	r3, [r7, #84]	; 0x54
 8002378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	461a      	mov	r2, r3
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	1891      	adds	r1, r2, r2
 8002384:	61b9      	str	r1, [r7, #24]
 8002386:	415b      	adcs	r3, r3
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800238e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002392:	f7fd ff3d 	bl	8000210 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4b6c      	ldr	r3, [pc, #432]	; (800254c <UART_SetConfig+0x38c>)
 800239c:	fba3 1302 	umull	r1, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	2164      	movs	r1, #100	; 0x64
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	4a67      	ldr	r2, [pc, #412]	; (800254c <UART_SetConfig+0x38c>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	f003 0207 	and.w	r2, r3, #7
 80023ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4432      	add	r2, r6
 80023c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023c2:	e0b9      	b.n	8002538 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c6:	461c      	mov	r4, r3
 80023c8:	f04f 0500 	mov.w	r5, #0
 80023cc:	4622      	mov	r2, r4
 80023ce:	462b      	mov	r3, r5
 80023d0:	1891      	adds	r1, r2, r2
 80023d2:	6139      	str	r1, [r7, #16]
 80023d4:	415b      	adcs	r3, r3
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023dc:	1912      	adds	r2, r2, r4
 80023de:	eb45 0303 	adc.w	r3, r5, r3
 80023e2:	f04f 0000 	mov.w	r0, #0
 80023e6:	f04f 0100 	mov.w	r1, #0
 80023ea:	00d9      	lsls	r1, r3, #3
 80023ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023f0:	00d0      	lsls	r0, r2, #3
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	eb12 0804 	adds.w	r8, r2, r4
 80023fa:	eb43 0905 	adc.w	r9, r3, r5
 80023fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	008b      	lsls	r3, r1, #2
 8002412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002416:	0082      	lsls	r2, r0, #2
 8002418:	4640      	mov	r0, r8
 800241a:	4649      	mov	r1, r9
 800241c:	f7fd fef8 	bl	8000210 <__aeabi_uldivmod>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4b49      	ldr	r3, [pc, #292]	; (800254c <UART_SetConfig+0x38c>)
 8002426:	fba3 2302 	umull	r2, r3, r3, r2
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	011e      	lsls	r6, r3, #4
 800242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002430:	4618      	mov	r0, r3
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	1894      	adds	r4, r2, r2
 800243c:	60bc      	str	r4, [r7, #8]
 800243e:	415b      	adcs	r3, r3
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002446:	1812      	adds	r2, r2, r0
 8002448:	eb41 0303 	adc.w	r3, r1, r3
 800244c:	f04f 0400 	mov.w	r4, #0
 8002450:	f04f 0500 	mov.w	r5, #0
 8002454:	00dd      	lsls	r5, r3, #3
 8002456:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800245a:	00d4      	lsls	r4, r2, #3
 800245c:	4622      	mov	r2, r4
 800245e:	462b      	mov	r3, r5
 8002460:	1814      	adds	r4, r2, r0
 8002462:	64bc      	str	r4, [r7, #72]	; 0x48
 8002464:	414b      	adcs	r3, r1
 8002466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	008b      	lsls	r3, r1, #2
 800247c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002480:	0082      	lsls	r2, r0, #2
 8002482:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002486:	f7fd fec3 	bl	8000210 <__aeabi_uldivmod>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <UART_SetConfig+0x38c>)
 8002490:	fba3 1302 	umull	r1, r3, r3, r2
 8002494:	095b      	lsrs	r3, r3, #5
 8002496:	2164      	movs	r1, #100	; 0x64
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	3332      	adds	r3, #50	; 0x32
 80024a2:	4a2a      	ldr	r2, [pc, #168]	; (800254c <UART_SetConfig+0x38c>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ae:	441e      	add	r6, r3
 80024b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b2:	4618      	mov	r0, r3
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	1894      	adds	r4, r2, r2
 80024be:	603c      	str	r4, [r7, #0]
 80024c0:	415b      	adcs	r3, r3
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c8:	1812      	adds	r2, r2, r0
 80024ca:	eb41 0303 	adc.w	r3, r1, r3
 80024ce:	f04f 0400 	mov.w	r4, #0
 80024d2:	f04f 0500 	mov.w	r5, #0
 80024d6:	00dd      	lsls	r5, r3, #3
 80024d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80024dc:	00d4      	lsls	r4, r2, #3
 80024de:	4622      	mov	r2, r4
 80024e0:	462b      	mov	r3, r5
 80024e2:	eb12 0a00 	adds.w	sl, r2, r0
 80024e6:	eb43 0b01 	adc.w	fp, r3, r1
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	008b      	lsls	r3, r1, #2
 80024fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002502:	0082      	lsls	r2, r0, #2
 8002504:	4650      	mov	r0, sl
 8002506:	4659      	mov	r1, fp
 8002508:	f7fd fe82 	bl	8000210 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <UART_SetConfig+0x38c>)
 8002512:	fba3 1302 	umull	r1, r3, r3, r2
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2164      	movs	r1, #100	; 0x64
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	3332      	adds	r3, #50	; 0x32
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <UART_SetConfig+0x38c>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4432      	add	r2, r6
 8002536:	609a      	str	r2, [r3, #8]
}
 8002538:	bf00      	nop
 800253a:	377c      	adds	r7, #124	; 0x7c
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40011000 	.word	0x40011000
 8002548:	40011400 	.word	0x40011400
 800254c:	51eb851f 	.word	0x51eb851f

08002550 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800255e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002562:	2b84      	cmp	r3, #132	; 0x84
 8002564:	d005      	beq.n	8002572 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002566:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	3303      	adds	r3, #3
 8002570:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002584:	f000 fade 	bl	8002b44 <vTaskStartScheduler>
  
  return osOK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}

0800258e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800258e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002590:	b089      	sub	sp, #36	; 0x24
 8002592:	af04      	add	r7, sp, #16
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <osThreadCreate+0x54>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01c      	beq.n	80025e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685c      	ldr	r4, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681d      	ldr	r5, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691e      	ldr	r6, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffc8 	bl	8002550 <makeFreeRtosPriority>
 80025c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025ca:	9202      	str	r2, [sp, #8]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	9100      	str	r1, [sp, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4632      	mov	r2, r6
 80025d4:	4629      	mov	r1, r5
 80025d6:	4620      	mov	r0, r4
 80025d8:	f000 f8ed 	bl	80027b6 <xTaskCreateStatic>
 80025dc:	4603      	mov	r3, r0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	e01c      	b.n	800261c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685c      	ldr	r4, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025ee:	b29e      	uxth	r6, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ffaa 	bl	8002550 <makeFreeRtosPriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4632      	mov	r2, r6
 800260a:	4629      	mov	r1, r5
 800260c:	4620      	mov	r0, r4
 800260e:	f000 f92f 	bl	8002870 <xTaskCreate>
 8002612:	4603      	mov	r3, r0
 8002614:	2b01      	cmp	r3, #1
 8002616:	d001      	beq.n	800261c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	e000      	b.n	800261e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002626 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <osDelay+0x16>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	e000      	b.n	800263e <osDelay+0x18>
 800263c:	2301      	movs	r3, #1
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fa4c 	bl	8002adc <vTaskDelay>
  
  return osOK;
 8002644:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f103 0208 	add.w	r2, r3, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f04f 32ff 	mov.w	r2, #4294967295
 8002666:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 0208 	add.w	r2, r3, #8
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f103 0208 	add.w	r2, r3, #8
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d103      	bne.n	8002710 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e00c      	b.n	800272a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3308      	adds	r3, #8
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e002      	b.n	800271e <vListInsert+0x2e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	429a      	cmp	r2, r3
 8002728:	d2f6      	bcs.n	8002718 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6852      	ldr	r2, [r2, #4]
 8002782:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d103      	bne.n	8002796 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b08e      	sub	sp, #56	; 0x38
 80027ba:	af04      	add	r7, sp, #16
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80027e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <xTaskCreateStatic+0x46>
	__asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	61fb      	str	r3, [r7, #28]
}
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027fc:	2354      	movs	r3, #84	; 0x54
 80027fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b54      	cmp	r3, #84	; 0x54
 8002804:	d00a      	beq.n	800281c <xTaskCreateStatic+0x66>
	__asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	61bb      	str	r3, [r7, #24]
}
 8002818:	bf00      	nop
 800281a:	e7fe      	b.n	800281a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800281c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01e      	beq.n	8002862 <xTaskCreateStatic+0xac>
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01b      	beq.n	8002862 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800282a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800283c:	2300      	movs	r3, #0
 800283e:	9303      	str	r3, [sp, #12]
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	9302      	str	r3, [sp, #8]
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f850 	bl	80028fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800285a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285c:	f000 f8d4 	bl	8002a08 <prvAddNewTaskToReadyList>
 8002860:	e001      	b.n	8002866 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002866:	697b      	ldr	r3, [r7, #20]
	}
 8002868:	4618      	mov	r0, r3
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af04      	add	r7, sp, #16
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fec7 	bl	8003618 <pvPortMalloc>
 800288a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00e      	beq.n	80028b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002892:	2054      	movs	r0, #84	; 0x54
 8002894:	f000 fec0 	bl	8003618 <pvPortMalloc>
 8002898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
 80028a6:	e005      	b.n	80028b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028a8:	6978      	ldr	r0, [r7, #20]
 80028aa:	f000 ff81 	bl	80037b0 <vPortFree>
 80028ae:	e001      	b.n	80028b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d017      	beq.n	80028ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9303      	str	r3, [sp, #12]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f80e 	bl	80028fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028de:	69f8      	ldr	r0, [r7, #28]
 80028e0:	f000 f892 	bl	8002a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028e4:	2301      	movs	r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	e002      	b.n	80028f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028f0:	69bb      	ldr	r3, [r7, #24]
	}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b088      	sub	sp, #32
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002912:	3b01      	subs	r3, #1
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f023 0307 	bic.w	r3, r3, #7
 8002920:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <prvInitialiseNewTask+0x48>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	617b      	str	r3, [r7, #20]
}
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01f      	beq.n	8002988 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	e012      	b.n	8002974 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	7819      	ldrb	r1, [r3, #0]
 8002956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	3334      	adds	r3, #52	; 0x34
 800295e:	460a      	mov	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d006      	beq.n	800297c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3301      	adds	r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	d9e9      	bls.n	800294e <prvInitialiseNewTask+0x54>
 800297a:	e000      	b.n	800297e <prvInitialiseNewTask+0x84>
			{
				break;
 800297c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002986:	e003      	b.n	8002990 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2b06      	cmp	r3, #6
 8002994:	d901      	bls.n	800299a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002996:	2306      	movs	r3, #6
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	2200      	movs	r2, #0
 80029aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	3304      	adds	r3, #4
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe6c 	bl	800268e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	3318      	adds	r3, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe67 	bl	800268e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	f1c3 0207 	rsb	r2, r3, #7
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2200      	movs	r2, #0
 80029da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	68f9      	ldr	r1, [r7, #12]
 80029e8:	69b8      	ldr	r0, [r7, #24]
 80029ea:	f000 fc05 	bl	80031f8 <pxPortInitialiseStack>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a10:	f000 fd20 	bl	8003454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <prvAddNewTaskToReadyList+0xb8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <prvAddNewTaskToReadyList+0xb8>)
 8002a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a26:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <prvAddNewTaskToReadyList+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d110      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a34:	f000 fabc 	bl	8002fb0 <prvInitialiseTaskLists>
 8002a38:	e00d      	b.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <prvAddNewTaskToReadyList+0xc0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d802      	bhi.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2201      	movs	r2, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <prvAddNewTaskToReadyList+0xcc>)
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f7ff fe0d 	bl	80026a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a8e:	f000 fd11 	bl	80034b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <prvAddNewTaskToReadyList+0xc0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <prvAddNewTaskToReadyList+0xd0>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000380 	.word	0x20000380
 8002ac4:	20000280 	.word	0x20000280
 8002ac8:	2000038c 	.word	0x2000038c
 8002acc:	2000039c 	.word	0x2000039c
 8002ad0:	20000388 	.word	0x20000388
 8002ad4:	20000284 	.word	0x20000284
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d017      	beq.n	8002b1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <vTaskDelay+0x60>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <vTaskDelay+0x30>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	60bb      	str	r3, [r7, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002b0c:	f000 f87a 	bl	8002c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b10:	2100      	movs	r1, #0
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fb0a 	bl	800312c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b18:	f000 f882 	bl	8002c20 <xTaskResumeAll>
 8002b1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <vTaskDelay+0x64>)
 8002b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200003a8 	.word	0x200003a8
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b52:	463a      	mov	r2, r7
 8002b54:	1d39      	adds	r1, r7, #4
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fcd4 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b60:	6839      	ldr	r1, [r7, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	9202      	str	r2, [sp, #8]
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	460a      	mov	r2, r1
 8002b72:	491e      	ldr	r1, [pc, #120]	; (8002bec <vTaskStartScheduler+0xa8>)
 8002b74:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <vTaskStartScheduler+0xac>)
 8002b76:	f7ff fe1e 	bl	80027b6 <xTaskCreateStatic>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <vTaskStartScheduler+0xb0>)
 8002b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <vTaskStartScheduler+0xb0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e001      	b.n	8002b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d116      	bne.n	8002bc6 <vTaskStartScheduler+0x82>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	613b      	str	r3, [r7, #16]
}
 8002baa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <vTaskStartScheduler+0xb4>)
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <vTaskStartScheduler+0xb8>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <vTaskStartScheduler+0xbc>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bc0:	f000 fba6 	bl	8003310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bc4:	e00e      	b.n	8002be4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d10a      	bne.n	8002be4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60fb      	str	r3, [r7, #12]
}
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <vTaskStartScheduler+0x9e>
}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	08003aac 	.word	0x08003aac
 8002bf0:	08002f81 	.word	0x08002f81
 8002bf4:	200003a4 	.word	0x200003a4
 8002bf8:	200003a0 	.word	0x200003a0
 8002bfc:	2000038c 	.word	0x2000038c
 8002c00:	20000384 	.word	0x20000384

08002c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <vTaskSuspendAll+0x18>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <vTaskSuspendAll+0x18>)
 8002c10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	200003a8 	.word	0x200003a8

08002c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <xTaskResumeAll+0x2c>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	603b      	str	r3, [r7, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c4c:	f000 fc02 	bl	8003454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c50:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d161      	bne.n	8002d26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c62:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <xTaskResumeAll+0x118>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d05d      	beq.n	8002d26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c6a:	e02e      	b.n	8002cca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <xTaskResumeAll+0x11c>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3318      	adds	r3, #24
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fd72 	bl	8002762 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fd6d 	bl	8002762 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <xTaskResumeAll+0x120>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <xTaskResumeAll+0x120>)
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <xTaskResumeAll+0x124>)
 8002ca8:	441a      	add	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff fcf9 	bl	80026a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <xTaskResumeAll+0x128>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <xTaskResumeAll+0x12c>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <xTaskResumeAll+0x11c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cc      	bne.n	8002c6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cd8:	f000 fa08 	bl	80030ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <xTaskResumeAll+0x130>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ce8:	f000 f836 	bl	8002d58 <xTaskIncrementTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <xTaskResumeAll+0x12c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f1      	bne.n	8002ce8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <xTaskResumeAll+0x130>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <xTaskResumeAll+0x12c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <xTaskResumeAll+0x134>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d26:	f000 fbc5 	bl	80034b4 <vPortExitCritical>

	return xAlreadyYielded;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200003a8 	.word	0x200003a8
 8002d38:	20000380 	.word	0x20000380
 8002d3c:	20000340 	.word	0x20000340
 8002d40:	20000388 	.word	0x20000388
 8002d44:	20000284 	.word	0x20000284
 8002d48:	20000280 	.word	0x20000280
 8002d4c:	20000394 	.word	0x20000394
 8002d50:	20000390 	.word	0x20000390
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d62:	4b4e      	ldr	r3, [pc, #312]	; (8002e9c <xTaskIncrementTick+0x144>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 808e 	bne.w	8002e88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <xTaskIncrementTick+0x148>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <xTaskIncrementTick+0x148>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d120      	bne.n	8002dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d80:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <xTaskIncrementTick+0x14c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	603b      	str	r3, [r7, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xTaskIncrementTick+0x46>
 8002da0:	4b40      	ldr	r3, [pc, #256]	; (8002ea4 <xTaskIncrementTick+0x14c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <xTaskIncrementTick+0x150>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <xTaskIncrementTick+0x14c>)
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4a3e      	ldr	r2, [pc, #248]	; (8002ea8 <xTaskIncrementTick+0x150>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <xTaskIncrementTick+0x154>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <xTaskIncrementTick+0x154>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	f000 f995 	bl	80030ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d348      	bcc.n	8002e5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dcc:	4b35      	ldr	r3, [pc, #212]	; (8002ea4 <xTaskIncrementTick+0x14c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	601a      	str	r2, [r3, #0]
					break;
 8002dde:	e03e      	b.n	8002e5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <xTaskIncrementTick+0x14c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d203      	bcs.n	8002e00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002df8:	4a2d      	ldr	r2, [pc, #180]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002dfe:	e02e      	b.n	8002e5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fcac 	bl	8002762 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3318      	adds	r3, #24
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fca3 	bl	8002762 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	2201      	movs	r2, #1
 8002e22:	409a      	lsls	r2, r3
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <xTaskIncrementTick+0x15c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <xTaskIncrementTick+0x15c>)
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <xTaskIncrementTick+0x160>)
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7ff fc2f 	bl	80026a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <xTaskIncrementTick+0x164>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d3b9      	bcc.n	8002dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e5c:	e7b6      	b.n	8002dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <xTaskIncrementTick+0x164>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	4914      	ldr	r1, [pc, #80]	; (8002eb8 <xTaskIncrementTick+0x160>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d901      	bls.n	8002e7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002e76:	2301      	movs	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <xTaskIncrementTick+0x168>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e82:	2301      	movs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	e004      	b.n	8002e92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <xTaskIncrementTick+0x16c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <xTaskIncrementTick+0x16c>)
 8002e90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e92:	697b      	ldr	r3, [r7, #20]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200003a8 	.word	0x200003a8
 8002ea0:	20000384 	.word	0x20000384
 8002ea4:	20000338 	.word	0x20000338
 8002ea8:	2000033c 	.word	0x2000033c
 8002eac:	20000398 	.word	0x20000398
 8002eb0:	200003a0 	.word	0x200003a0
 8002eb4:	20000388 	.word	0x20000388
 8002eb8:	20000284 	.word	0x20000284
 8002ebc:	20000280 	.word	0x20000280
 8002ec0:	20000394 	.word	0x20000394
 8002ec4:	20000390 	.word	0x20000390

08002ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ece:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <vTaskSwitchContext+0xa4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <vTaskSwitchContext+0xa8>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002edc:	e03f      	b.n	8002f5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <vTaskSwitchContext+0xa8>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <vTaskSwitchContext+0xac>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
 8002ef4:	f1c3 031f 	rsb	r3, r3, #31
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	491f      	ldr	r1, [pc, #124]	; (8002f78 <vTaskSwitchContext+0xb0>)
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	607b      	str	r3, [r7, #4]
}
 8002f20:	bf00      	nop
 8002f22:	e7fe      	b.n	8002f22 <vTaskSwitchContext+0x5a>
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <vTaskSwitchContext+0xb0>)
 8002f30:	4413      	add	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	3308      	adds	r3, #8
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d104      	bne.n	8002f54 <vTaskSwitchContext+0x8c>
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <vTaskSwitchContext+0xb4>)
 8002f5c:	6013      	str	r3, [r2, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	200003a8 	.word	0x200003a8
 8002f70:	20000394 	.word	0x20000394
 8002f74:	20000388 	.word	0x20000388
 8002f78:	20000284 	.word	0x20000284
 8002f7c:	20000280 	.word	0x20000280

08002f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f88:	f000 f852 	bl	8003030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <prvIdleTask+0x28>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d9f9      	bls.n	8002f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <prvIdleTask+0x2c>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fa4:	e7f0      	b.n	8002f88 <prvIdleTask+0x8>
 8002fa6:	bf00      	nop
 8002fa8:	20000284 	.word	0x20000284
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	e00c      	b.n	8002fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <prvInitialiseTaskLists+0x60>)
 8002fc8:	4413      	add	r3, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fb3f 	bl	800264e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b06      	cmp	r3, #6
 8002fda:	d9ef      	bls.n	8002fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fdc:	480d      	ldr	r0, [pc, #52]	; (8003014 <prvInitialiseTaskLists+0x64>)
 8002fde:	f7ff fb36 	bl	800264e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fe2:	480d      	ldr	r0, [pc, #52]	; (8003018 <prvInitialiseTaskLists+0x68>)
 8002fe4:	f7ff fb33 	bl	800264e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <prvInitialiseTaskLists+0x6c>)
 8002fea:	f7ff fb30 	bl	800264e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fee:	480c      	ldr	r0, [pc, #48]	; (8003020 <prvInitialiseTaskLists+0x70>)
 8002ff0:	f7ff fb2d 	bl	800264e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ff4:	480b      	ldr	r0, [pc, #44]	; (8003024 <prvInitialiseTaskLists+0x74>)
 8002ff6:	f7ff fb2a 	bl	800264e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <prvInitialiseTaskLists+0x78>)
 8002ffc:	4a05      	ldr	r2, [pc, #20]	; (8003014 <prvInitialiseTaskLists+0x64>)
 8002ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <prvInitialiseTaskLists+0x7c>)
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <prvInitialiseTaskLists+0x68>)
 8003004:	601a      	str	r2, [r3, #0]
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000284 	.word	0x20000284
 8003014:	20000310 	.word	0x20000310
 8003018:	20000324 	.word	0x20000324
 800301c:	20000340 	.word	0x20000340
 8003020:	20000354 	.word	0x20000354
 8003024:	2000036c 	.word	0x2000036c
 8003028:	20000338 	.word	0x20000338
 800302c:	2000033c 	.word	0x2000033c

08003030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003036:	e019      	b.n	800306c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003038:	f000 fa0c 	bl	8003454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <prvCheckTasksWaitingTermination+0x50>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3304      	adds	r3, #4
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fb8a 	bl	8002762 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <prvCheckTasksWaitingTermination+0x54>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3b01      	subs	r3, #1
 8003054:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <prvCheckTasksWaitingTermination+0x54>)
 8003056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <prvCheckTasksWaitingTermination+0x58>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3b01      	subs	r3, #1
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <prvCheckTasksWaitingTermination+0x58>)
 8003060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003062:	f000 fa27 	bl	80034b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f810 	bl	800308c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <prvCheckTasksWaitingTermination+0x58>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e1      	bne.n	8003038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000354 	.word	0x20000354
 8003084:	20000380 	.word	0x20000380
 8003088:	20000368 	.word	0x20000368

0800308c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fb84 	bl	80037b0 <vPortFree>
				vPortFree( pxTCB );
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb81 	bl	80037b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030ae:	e018      	b.n	80030e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d103      	bne.n	80030c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb78 	bl	80037b0 <vPortFree>
	}
 80030c0:	e00f      	b.n	80030e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d00a      	beq.n	80030e2 <prvDeleteTCB+0x56>
	__asm volatile
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	60fb      	str	r3, [r7, #12]
}
 80030de:	bf00      	nop
 80030e0:	e7fe      	b.n	80030e0 <prvDeleteTCB+0x54>
	}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <prvResetNextTaskUnblockTime+0x38>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvResetNextTaskUnblockTime+0x3c>)
 80030fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003104:	e008      	b.n	8003118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <prvResetNextTaskUnblockTime+0x38>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <prvResetNextTaskUnblockTime+0x3c>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	20000338 	.word	0x20000338
 8003128:	200003a0 	.word	0x200003a0

0800312c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003136:	4b29      	ldr	r3, [pc, #164]	; (80031dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800313c:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3304      	adds	r3, #4
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fb0d 	bl	8002762 <uxListRemove>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2201      	movs	r2, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4013      	ands	r3, r2
 8003162:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003164:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d10a      	bne.n	8003184 <prvAddCurrentTaskToDelayedList+0x58>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	481a      	ldr	r0, [pc, #104]	; (80031e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800317e:	f7ff fa93 	bl	80026a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003182:	e026      	b.n	80031d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	429a      	cmp	r2, r3
 800319a:	d209      	bcs.n	80031b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7ff faa1 	bl	80026f0 <vListInsert>
}
 80031ae:	e010      	b.n	80031d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7ff fa97 	bl	80026f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d202      	bcs.n	80031d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80031cc:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6013      	str	r3, [r2, #0]
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000384 	.word	0x20000384
 80031e0:	20000280 	.word	0x20000280
 80031e4:	20000388 	.word	0x20000388
 80031e8:	2000036c 	.word	0x2000036c
 80031ec:	2000033c 	.word	0x2000033c
 80031f0:	20000338 	.word	0x20000338
 80031f4:	200003a0 	.word	0x200003a0

080031f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3b04      	subs	r3, #4
 8003208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b04      	subs	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3b04      	subs	r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <pxPortInitialiseStack+0x64>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3b14      	subs	r3, #20
 8003232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3b04      	subs	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f06f 0202 	mvn.w	r2, #2
 8003246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3b20      	subs	r3, #32
 800324c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	08003261 	.word	0x08003261

08003260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <prvTaskExitError+0x54>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003272:	d00a      	beq.n	800328a <prvTaskExitError+0x2a>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
}
 8003286:	bf00      	nop
 8003288:	e7fe      	b.n	8003288 <prvTaskExitError+0x28>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	60bb      	str	r3, [r7, #8]
}
 800329c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800329e:	bf00      	nop
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0fc      	beq.n	80032a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	2000000c 	.word	0x2000000c
	...

080032c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <pxCurrentTCBConst2>)
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	6808      	ldr	r0, [r1, #0]
 80032c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ca:	f380 8809 	msr	PSP, r0
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f04f 0000 	mov.w	r0, #0
 80032d6:	f380 8811 	msr	BASEPRI, r0
 80032da:	4770      	bx	lr
 80032dc:	f3af 8000 	nop.w

080032e0 <pxCurrentTCBConst2>:
 80032e0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032e8:	4808      	ldr	r0, [pc, #32]	; (800330c <prvPortStartFirstTask+0x24>)
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	6800      	ldr	r0, [r0, #0]
 80032ee:	f380 8808 	msr	MSP, r0
 80032f2:	f04f 0000 	mov.w	r0, #0
 80032f6:	f380 8814 	msr	CONTROL, r0
 80032fa:	b662      	cpsie	i
 80032fc:	b661      	cpsie	f
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	df00      	svc	0
 8003308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800330a:	bf00      	nop
 800330c:	e000ed08 	.word	0xe000ed08

08003310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003316:	4b46      	ldr	r3, [pc, #280]	; (8003430 <xPortStartScheduler+0x120>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a46      	ldr	r2, [pc, #280]	; (8003434 <xPortStartScheduler+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10a      	bne.n	8003336 <xPortStartScheduler+0x26>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	613b      	str	r3, [r7, #16]
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003336:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <xPortStartScheduler+0x120>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <xPortStartScheduler+0x128>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10a      	bne.n	8003356 <xPortStartScheduler+0x46>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	60fb      	str	r3, [r7, #12]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003356:	4b39      	ldr	r3, [pc, #228]	; (800343c <xPortStartScheduler+0x12c>)
 8003358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <xPortStartScheduler+0x130>)
 800337c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <xPortStartScheduler+0x134>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003384:	e009      	b.n	800339a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <xPortStartScheduler+0x134>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <xPortStartScheduler+0x134>)
 800338e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d0ef      	beq.n	8003386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033a6:	4b27      	ldr	r3, [pc, #156]	; (8003444 <xPortStartScheduler+0x134>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00a      	beq.n	80033c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60bb      	str	r3, [r7, #8]
}
 80033c4:	bf00      	nop
 80033c6:	e7fe      	b.n	80033c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <xPortStartScheduler+0x134>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <xPortStartScheduler+0x134>)
 80033d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <xPortStartScheduler+0x134>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033da:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <xPortStartScheduler+0x134>)
 80033dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <xPortStartScheduler+0x138>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <xPortStartScheduler+0x138>)
 80033ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <xPortStartScheduler+0x138>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a14      	ldr	r2, [pc, #80]	; (8003448 <xPortStartScheduler+0x138>)
 80033f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033fe:	f000 f8dd 	bl	80035bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <xPortStartScheduler+0x13c>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003408:	f000 f8fc 	bl	8003604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <xPortStartScheduler+0x140>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <xPortStartScheduler+0x140>)
 8003412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003418:	f7ff ff66 	bl	80032e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800341c:	f7ff fd54 	bl	8002ec8 <vTaskSwitchContext>
	prvTaskExitError();
 8003420:	f7ff ff1e 	bl	8003260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00
 8003434:	410fc271 	.word	0x410fc271
 8003438:	410fc270 	.word	0x410fc270
 800343c:	e000e400 	.word	0xe000e400
 8003440:	200003ac 	.word	0x200003ac
 8003444:	200003b0 	.word	0x200003b0
 8003448:	e000ed20 	.word	0xe000ed20
 800344c:	2000000c 	.word	0x2000000c
 8003450:	e000ef34 	.word	0xe000ef34

08003454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
	__asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	607b      	str	r3, [r7, #4]
}
 800346c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <vPortEnterCritical+0x58>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <vPortEnterCritical+0x58>)
 8003476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <vPortEnterCritical+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10f      	bne.n	80034a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <vPortEnterCritical+0x5c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	603b      	str	r3, [r7, #0]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <vPortEnterCritical+0x4a>
	}
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	2000000c 	.word	0x2000000c
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <vPortExitCritical+0x50>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <vPortExitCritical+0x24>
	__asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	607b      	str	r3, [r7, #4]
}
 80034d4:	bf00      	nop
 80034d6:	e7fe      	b.n	80034d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <vPortExitCritical+0x50>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <vPortExitCritical+0x50>)
 80034e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <vPortExitCritical+0x50>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <vPortExitCritical+0x42>
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	2000000c 	.word	0x2000000c
	...

08003510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003510:	f3ef 8009 	mrs	r0, PSP
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <pxCurrentTCBConst>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	f01e 0f10 	tst.w	lr, #16
 8003520:	bf08      	it	eq
 8003522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352a:	6010      	str	r0, [r2, #0]
 800352c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003534:	f380 8811 	msr	BASEPRI, r0
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f7ff fcc2 	bl	8002ec8 <vTaskSwitchContext>
 8003544:	f04f 0000 	mov.w	r0, #0
 8003548:	f380 8811 	msr	BASEPRI, r0
 800354c:	bc09      	pop	{r0, r3}
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	6808      	ldr	r0, [r1, #0]
 8003552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003556:	f01e 0f10 	tst.w	lr, #16
 800355a:	bf08      	it	eq
 800355c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003560:	f380 8809 	msr	PSP, r0
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	f3af 8000 	nop.w

08003570 <pxCurrentTCBConst>:
 8003570:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	607b      	str	r3, [r7, #4]
}
 8003590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003592:	f7ff fbe1 	bl	8002d58 <xTaskIncrementTick>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <SysTick_Handler+0x40>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	2300      	movs	r3, #0
 80035a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f383 8811 	msr	BASEPRI, r3
}
 80035ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <vPortSetupTimerInterrupt+0x34>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <vPortSetupTimerInterrupt+0x38>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <vPortSetupTimerInterrupt+0x3c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <vPortSetupTimerInterrupt+0x40>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	4a09      	ldr	r2, [pc, #36]	; (8003600 <vPortSetupTimerInterrupt+0x44>)
 80035da:	3b01      	subs	r3, #1
 80035dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <vPortSetupTimerInterrupt+0x34>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000e010 	.word	0xe000e010
 80035f4:	e000e018 	.word	0xe000e018
 80035f8:	20000000 	.word	0x20000000
 80035fc:	10624dd3 	.word	0x10624dd3
 8003600:	e000e014 	.word	0xe000e014

08003604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003614 <vPortEnableVFP+0x10>
 8003608:	6801      	ldr	r1, [r0, #0]
 800360a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800360e:	6001      	str	r1, [r0, #0]
 8003610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003612:	bf00      	nop
 8003614:	e000ed88 	.word	0xe000ed88

08003618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	; 0x28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003624:	f7ff faee 	bl	8002c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <pvPortMalloc+0x180>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003630:	f000 f920 	bl	8003874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <pvPortMalloc+0x184>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f040 8093 	bne.w	8003768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01d      	beq.n	8003684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003648:	2208      	movs	r2, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f023 0307 	bic.w	r3, r3, #7
 8003660:	3308      	adds	r3, #8
 8003662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <pvPortMalloc+0x6c>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	617b      	str	r3, [r7, #20]
}
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d06e      	beq.n	8003768 <pvPortMalloc+0x150>
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <pvPortMalloc+0x188>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d869      	bhi.n	8003768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <pvPortMalloc+0x18c>)
 8003696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003698:	4b42      	ldr	r3, [pc, #264]	; (80037a4 <pvPortMalloc+0x18c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369e:	e004      	b.n	80036aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d903      	bls.n	80036bc <pvPortMalloc+0xa4>
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f1      	bne.n	80036a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <pvPortMalloc+0x180>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d050      	beq.n	8003768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2208      	movs	r2, #8
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	1ad2      	subs	r2, r2, r3
 80036e0:	2308      	movs	r3, #8
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d91f      	bls.n	8003728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <pvPortMalloc+0xf8>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	613b      	str	r3, [r7, #16]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003722:	69b8      	ldr	r0, [r7, #24]
 8003724:	f000 f908 	bl	8003938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <pvPortMalloc+0x188>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <pvPortMalloc+0x188>)
 8003734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <pvPortMalloc+0x188>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <pvPortMalloc+0x190>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d203      	bcs.n	800374a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <pvPortMalloc+0x188>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <pvPortMalloc+0x190>)
 8003748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <pvPortMalloc+0x184>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <pvPortMalloc+0x194>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a11      	ldr	r2, [pc, #68]	; (80037ac <pvPortMalloc+0x194>)
 8003766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003768:	f7ff fa5a 	bl	8002c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <pvPortMalloc+0x174>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	60fb      	str	r3, [r7, #12]
}
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <pvPortMalloc+0x172>
	return pvReturn;
 800378c:	69fb      	ldr	r3, [r7, #28]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20003fbc 	.word	0x20003fbc
 800379c:	20003fd0 	.word	0x20003fd0
 80037a0:	20003fc0 	.word	0x20003fc0
 80037a4:	20003fb4 	.word	0x20003fb4
 80037a8:	20003fc4 	.word	0x20003fc4
 80037ac:	20003fc8 	.word	0x20003fc8

080037b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04d      	beq.n	800385e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037c2:	2308      	movs	r3, #8
 80037c4:	425b      	negs	r3, r3
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4413      	add	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <vPortFree+0xb8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <vPortFree+0x44>
	__asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	60fb      	str	r3, [r7, #12]
}
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <vPortFree+0x62>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	60bb      	str	r3, [r7, #8]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4b14      	ldr	r3, [pc, #80]	; (8003868 <vPortFree+0xb8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01e      	beq.n	800385e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11a      	bne.n	800385e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <vPortFree+0xb8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003838:	f7ff f9e4 	bl	8002c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <vPortFree+0xbc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4413      	add	r3, r2
 8003846:	4a09      	ldr	r2, [pc, #36]	; (800386c <vPortFree+0xbc>)
 8003848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800384a:	6938      	ldr	r0, [r7, #16]
 800384c:	f000 f874 	bl	8003938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <vPortFree+0xc0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3301      	adds	r3, #1
 8003856:	4a06      	ldr	r2, [pc, #24]	; (8003870 <vPortFree+0xc0>)
 8003858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800385a:	f7ff f9e1 	bl	8002c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20003fd0 	.word	0x20003fd0
 800386c:	20003fc0 	.word	0x20003fc0
 8003870:	20003fcc 	.word	0x20003fcc

08003874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800387a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800387e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <prvHeapInit+0xac>)
 8003882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3307      	adds	r3, #7
 8003892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0307 	bic.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <prvHeapInit+0xac>)
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <prvHeapInit+0xb0>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <prvHeapInit+0xb0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038c0:	2208      	movs	r2, #8
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a15      	ldr	r2, [pc, #84]	; (8003928 <prvHeapInit+0xb4>)
 80038d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <prvHeapInit+0xb4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2200      	movs	r2, #0
 80038dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <prvHeapInit+0xb4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	1ad2      	subs	r2, r2, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <prvHeapInit+0xb4>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <prvHeapInit+0xb8>)
 8003902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a09      	ldr	r2, [pc, #36]	; (8003930 <prvHeapInit+0xbc>)
 800390a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <prvHeapInit+0xc0>)
 800390e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	200003b4 	.word	0x200003b4
 8003924:	20003fb4 	.word	0x20003fb4
 8003928:	20003fbc 	.word	0x20003fbc
 800392c:	20003fc4 	.word	0x20003fc4
 8003930:	20003fc0 	.word	0x20003fc0
 8003934:	20003fd0 	.word	0x20003fd0

08003938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003940:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <prvInsertBlockIntoFreeList+0xac>)
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e002      	b.n	800394c <prvInsertBlockIntoFreeList+0x14>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d8f7      	bhi.n	8003946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d108      	bne.n	800397a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	441a      	add	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	441a      	add	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d118      	bne.n	80039c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <prvInsertBlockIntoFreeList+0xb0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d00d      	beq.n	80039b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e008      	b.n	80039c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <prvInsertBlockIntoFreeList+0xb0>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e003      	b.n	80039c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d002      	beq.n	80039d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20003fb4 	.word	0x20003fb4
 80039e8:	20003fbc 	.word	0x20003fbc

080039ec <__libc_init_array>:
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	4d0d      	ldr	r5, [pc, #52]	; (8003a24 <__libc_init_array+0x38>)
 80039f0:	4c0d      	ldr	r4, [pc, #52]	; (8003a28 <__libc_init_array+0x3c>)
 80039f2:	1b64      	subs	r4, r4, r5
 80039f4:	10a4      	asrs	r4, r4, #2
 80039f6:	2600      	movs	r6, #0
 80039f8:	42a6      	cmp	r6, r4
 80039fa:	d109      	bne.n	8003a10 <__libc_init_array+0x24>
 80039fc:	4d0b      	ldr	r5, [pc, #44]	; (8003a2c <__libc_init_array+0x40>)
 80039fe:	4c0c      	ldr	r4, [pc, #48]	; (8003a30 <__libc_init_array+0x44>)
 8003a00:	f000 f820 	bl	8003a44 <_init>
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	2600      	movs	r6, #0
 8003a0a:	42a6      	cmp	r6, r4
 8003a0c:	d105      	bne.n	8003a1a <__libc_init_array+0x2e>
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a14:	4798      	blx	r3
 8003a16:	3601      	adds	r6, #1
 8003a18:	e7ee      	b.n	80039f8 <__libc_init_array+0xc>
 8003a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a1e:	4798      	blx	r3
 8003a20:	3601      	adds	r6, #1
 8003a22:	e7f2      	b.n	8003a0a <__libc_init_array+0x1e>
 8003a24:	08003ad4 	.word	0x08003ad4
 8003a28:	08003ad4 	.word	0x08003ad4
 8003a2c:	08003ad4 	.word	0x08003ad4
 8003a30:	08003ad8 	.word	0x08003ad8

08003a34 <memset>:
 8003a34:	4402      	add	r2, r0
 8003a36:	4603      	mov	r3, r0
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d100      	bne.n	8003a3e <memset+0xa>
 8003a3c:	4770      	bx	lr
 8003a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a42:	e7f9      	b.n	8003a38 <memset+0x4>

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
